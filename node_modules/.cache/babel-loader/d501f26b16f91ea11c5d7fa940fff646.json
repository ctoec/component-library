{"ast":null,"code":"import { createContext, useContext } from 'react';\n/**\n * Utility for casting the un-typed context to the generic with type parameter,\n * so that form consumers can have type-constrained data, dataDriller, and updateData\n * @param context\n */\n\nexport function useGenericContext(context) {\n  var processedContext = useContext(context);\n  return processedContext;\n}\nvar FormContext = createContext({\n  data: undefined,\n  dataDriller: undefined,\n  updateData: function updateData(_) {}\n});\nvar FormProvider = FormContext.Provider,\n    FormConsumer = FormContext.Consumer;\nexport { FormProvider, FormConsumer };\nexport default FormContext;\n\ntry {\n  // @ts-ignore\n  useGenericContext.displayName = \"useGenericContext\"; // @ts-ignore\n\n  useGenericContext.__docgenInfo = {\n    \"description\": \"Utility for casting the un-typed context to the generic with type parameter,\\nso that form consumers can have type-constrained data, dataDriller, and updateData\\n@param context\",\n    \"displayName\": \"useGenericContext\",\n    \"props\": {\n      \"Provider\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"Provider\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"Provider<any>\"\n        }\n      },\n      \"Consumer\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"Consumer\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"Consumer<any>\"\n        }\n      },\n      \"displayName\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"displayName\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormContext.ts#useGenericContext\"] = {\n      docgenInfo: useGenericContext.__docgenInfo,\n      name: \"useGenericContext\",\n      path: \"src/components/Form_New/FormContext.ts#useGenericContext\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\ntry {\n  // @ts-ignore\n  FormProvider.displayName = \"FormProvider\"; // @ts-ignore\n\n  FormProvider.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"FormProvider\",\n    \"props\": {\n      \"value\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"value\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"FormContextType\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormContext.ts#FormProvider\"] = {\n      docgenInfo: FormProvider.__docgenInfo,\n      name: \"FormProvider\",\n      path: \"src/components/Form_New/FormContext.ts#FormProvider\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\ntry {\n  // @ts-ignore\n  FormConsumer.displayName = \"FormConsumer\"; // @ts-ignore\n\n  FormConsumer.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"FormConsumer\",\n    \"props\": {}\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormContext.ts#FormConsumer\"] = {\n      docgenInfo: FormConsumer.__docgenInfo,\n      name: \"FormConsumer\",\n      path: \"src/components/Form_New/FormContext.ts#FormConsumer\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}","map":{"version":3,"sources":["/home/app/src/components/Form_New/FormContext.ts"],"names":["processedContext","useContext","FormContext","createContext","data","dataDriller","updateData","Provider","FormProvider","Consumer","FormConsumer","useGenericContext","STORYBOOK_REACT_CLASSES","docgenInfo","name","path"],"mappings":"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","sourcesContent":["import { createContext, Context, useContext } from 'react';\nimport { TObjectDriller } from './ObjectDriller';\n\n/**\n * FormContext provides form data, data accessor, and data update function to any\n * components that are children of a Form\n *\n * @property data The data being tracked (displayed and updated) by the form.\n * This data should only get immutable updates, via the provided updateData function.\n *\n * @property dataDriller ObjectDriller wrapper on form data, provided for convenience\n * to save all custom form fields from needing to create one.\n *\n * @property updateData Immutable update function for form data\n */\ntype FormContextType = {\n\tdata: any;\n\tdataDriller: any;\n\tupdateData: React.Dispatch<React.SetStateAction<any>>;\n};\n\n/**\n * The generic form context type, to support parameterized types for the context\n */\nexport type GenericFormContextType<T> = {\n\tdata: T;\n\tdataDriller: TObjectDriller<NonNullable<T>>;\n\t// Allows for function style update (setState(s => s) as opposed to setState(s))\n\t// Needed for components that make multiple edits to the same object\n\t// Otherwise just passing the object would result in one of the updates being\n\t// overwritten.\n\tupdateData: React.Dispatch<React.SetStateAction<T>>;\n};\n/**\n * Utility for casting the un-typed context to the generic with type parameter,\n * so that form consumers can have type-constrained data, dataDriller, and updateData\n * @param context\n */\nexport function useGenericContext<S>(context: Context<any>) {\n\tconst processedContext = useContext(context);\n\treturn processedContext as GenericFormContextType<S>;\n}\n\nconst FormContext = createContext<FormContextType>({\n\tdata: undefined,\n\tdataDriller: undefined,\n\tupdateData: (_) => {},\n});\n\nexport const { Provider: FormProvider, Consumer: FormConsumer } = FormContext;\nexport default FormContext;\ntry {\n    // @ts-ignore\n    useGenericContext.displayName = \"useGenericContext\";\n    // @ts-ignore\n    useGenericContext.__docgenInfo = { \"description\": \"Utility for casting the un-typed context to the generic with type parameter,\\nso that form consumers can have type-constrained data, dataDriller, and updateData\\n@param context\", \"displayName\": \"useGenericContext\", \"props\": { \"Provider\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"Provider\", \"required\": true, \"type\": { \"name\": \"Provider<any>\" } }, \"Consumer\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"Consumer\", \"required\": true, \"type\": { \"name\": \"Consumer<any>\" } }, \"displayName\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"displayName\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormContext.ts#useGenericContext\"] = { docgenInfo: useGenericContext.__docgenInfo, name: \"useGenericContext\", path: \"src/components/Form_New/FormContext.ts#useGenericContext\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    FormProvider.displayName = \"FormProvider\";\n    // @ts-ignore\n    FormProvider.__docgenInfo = { \"description\": \"\", \"displayName\": \"FormProvider\", \"props\": { \"value\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"value\", \"required\": true, \"type\": { \"name\": \"FormContextType\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormContext.ts#FormProvider\"] = { docgenInfo: FormProvider.__docgenInfo, name: \"FormProvider\", path: \"src/components/Form_New/FormContext.ts#FormProvider\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    FormConsumer.displayName = \"FormConsumer\";\n    // @ts-ignore\n    FormConsumer.__docgenInfo = { \"description\": \"\", \"displayName\": \"FormConsumer\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormContext.ts#FormConsumer\"] = { docgenInfo: FormConsumer.__docgenInfo, name: \"FormConsumer\", path: \"src/components/Form_New/FormContext.ts#FormConsumer\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}