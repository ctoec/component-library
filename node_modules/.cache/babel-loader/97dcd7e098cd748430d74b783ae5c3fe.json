{"ast":null,"code":"import _toConsumableArray from\"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from'react';import{FormFieldSet}from'../Form_New';import{FieldSet}from'../FieldSet/FieldSet';import cx from'classnames';/**\n * Type for the values that will define\n * a single Checkbox option in the CheckboxGroup\n */ /**\n * Component for displaying a group of related Checkboxes.\n * Renders the checkbox group inside a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */export var CheckboxGroup=function CheckboxGroup(_ref){var id=_ref.id,childrenGroupClassName=_ref.childrenGroupClassName,props=_objectWithoutProperties(_ref,[\"id\",\"childrenGroupClassName\"]);var checkboxGroupProps=_objectSpread({},props);var useFormFieldSet=props.useFormFieldSet;if(useFormFieldSet){var formFieldSetProps=_objectSpread({},props);return/*#__PURE__*/React.createElement(FormFieldSet,Object.assign({},formFieldSetProps,{id:\"\".concat(id,\"-fieldset\"),childrenGroupClassName:cx(childrenGroupClassName,'margin-top-3')}),/*#__PURE__*/React.createElement(InternalCheckboxGroup,Object.assign({id:id},checkboxGroupProps)));}var fieldSetProps=_objectSpread({},props);return/*#__PURE__*/React.createElement(FieldSet,Object.assign({},fieldSetProps,{id:\"\".concat(id,\"-fieldset\"),childrenGroupClassName:cx(childrenGroupClassName,'margin-top-3')}),/*#__PURE__*/React.createElement(InternalCheckboxGroup,Object.assign({id:id},checkboxGroupProps)));};/**\n * Internal component for managing a group of related Checkboxes\n *\n * When each checkbox maps to an individual field, per-checkbox onChange function\n * should be defined in the CheckboxOption render func. Make sure to provide onChange\n * prop after spread props to overwrite props.onChange:\n * \t{\n *\t\trender: (props) => <Checkbox {...props} onChange={onChange} />\n * \t\t...\n * \t}\n *\n * For other cases where the checkbox group maps to a single field, and each checkbox\n * represents a value for that field that is handled in the same way, a group-level\n * onChange function can be defined. It will be passed in to each Checkbox.\n */var InternalCheckboxGroup=function InternalCheckboxGroup(_ref2){var id=_ref2.id,options=_ref2.options,_ref2$onChange=_ref2.onChange,onChange=_ref2$onChange===void 0?function(){}:_ref2$onChange,_ref2$defaultValue=_ref2.defaultValue,defaultValue=_ref2$defaultValue===void 0?[]:_ref2$defaultValue;var selectedItemsOnInput=Array.isArray(defaultValue)?defaultValue:[defaultValue];var _useState=useState(selectedItemsOnInput),_useState2=_slicedToArray(_useState,2),selectedItems=_useState2[0],setSelectedItems=_useState2[1];return/*#__PURE__*/React.createElement(React.Fragment,null,options.map(function(_ref3){var Render=_ref3.render,value=_ref3.value,expansion=_ref3.expansion;return/*#__PURE__*/React.createElement(\"span\",{key:\"\".concat(id,\"-\").concat(value),onChange:function onChange(){setSelectedItems(function(items){if(items.includes(value)){return items.filter(function(i){return i!==value;});}return[].concat(_toConsumableArray(items),[value]);});return false;}},/*#__PURE__*/React.createElement(Render,{id:value,selected:selectedItems.includes(value),onChange:onChange}),expansion&&selectedItems.includes(value)&&/*#__PURE__*/React.createElement(\"div\",{className:\"oec-itemchooser-expansion\"},expansion));}));};try{// @ts-ignore\nCheckboxGroup.displayName=\"CheckboxGroup\";// @ts-ignore\nCheckboxGroup.__docgenInfo={\"description\":\"Component for displaying a group of related Checkboxes.\\nRenders the checkbox group inside a FieldSet by default, or FormFieldSet\\nif FormFieldSetProps is provided as type param\",\"displayName\":\"CheckboxGroup\",\"props\":{\"options\":{\"defaultValue\":null,\"description\":\"\",\"name\":\"options\",\"required\":true,\"type\":{\"name\":\"CheckboxOption[]\"}},\"defaultValue\":{\"defaultValue\":{value:\"[]\"},\"description\":\"\",\"name\":\"defaultValue\",\"required\":false,\"type\":{\"name\":\"string | string[]\"}},\"name\":{\"defaultValue\":null,\"description\":\"\",\"name\":\"name\",\"required\":false,\"type\":{\"name\":\"string\"}},\"onChange\":{\"defaultValue\":{value:\"() => {}\"},\"description\":\"\",\"name\":\"onChange\",\"required\":false,\"type\":{\"name\":\"any\"}}}};// @ts-ignore\nif(typeof STORYBOOK_REACT_CLASSES!==\"undefined\")// @ts-ignore\nSTORYBOOK_REACT_CLASSES[\"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\"]={docgenInfo:CheckboxGroup.__docgenInfo,name:\"CheckboxGroup\",path:\"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\"};}catch(__react_docgen_typescript_loader_error){}","map":{"version":3,"sources":["/home/app/src/components/CheckboxGroup/CheckboxGroup.tsx"],"names":["CheckboxGroup","id","childrenGroupClassName","props","checkboxGroupProps","useFormFieldSet","formFieldSetProps","cx","fieldSetProps","InternalCheckboxGroup","options","onChange","defaultValue","selectedItemsOnInput","Array","selectedItems","setSelectedItems","useState","Render","value","expansion","items","i","STORYBOOK_REACT_CLASSES","docgenInfo","name","path"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { FieldSetProps } from '..';\nimport { FormFieldSetProps, FormFieldSet } from '../Form_New';\nimport { FieldSet } from '../FieldSet/FieldSet';\nimport cx from 'classnames';\n\n/**\n * Type for the values that will define\n * a single Checkbox option in the CheckboxGroup\n */\nexport type CheckboxOption = {\n\trender: (props: {\n\t\tid: string;\n\t\tselected: boolean;\n\t\tonChange: React.ChangeEventHandler<HTMLInputElement>;\n\t}) => JSX.Element;\n\tvalue: string;\n\texpansion?: React.ReactNode;\n};\n\n/**\n * Props for InternalCheckboxGroup\n */\ntype InternalCheckboxGroupProps = {\n\toptions: CheckboxOption[];\n\tdefaultValue?: string | string[];\n\tname?: string;\n\tonChange?: React.ChangeEventHandler<HTMLInputElement>;\n};\n\n/**\n * Props for CheckboxGroup, which includes props for InternalCheckboxGroup,\n * props for the wrapping field set (FieldSet or FormFieldSet),\n * and conditionally a flag to indicate which type of field set should be used\n */\nexport type CheckboxGroupProps<\n\tTFieldSetProps extends FieldSetProps | FormFieldSetProps<any>\n> = InternalCheckboxGroupProps &\n\t(TFieldSetProps extends FormFieldSetProps<infer T>\n\t\t? { useFormFieldSet: true } & FormFieldSetProps<T>\n\t\t: FieldSetProps);\n\n/**\n * Component for displaying a group of related Checkboxes.\n * Renders the checkbox group inside a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */\nexport const CheckboxGroup = <\n\tTFieldSetProps extends FieldSetProps | FormFieldSetProps<any> = FieldSetProps\n>({\n\tid,\n\tchildrenGroupClassName,\n\t...props\n}: CheckboxGroupProps<TFieldSetProps>) => {\n\tconst checkboxGroupProps = { ...props } as InternalCheckboxGroupProps;\n\n\tconst useFormFieldSet = ((props as unknown) as CheckboxGroupProps<FormFieldSetProps<any>>)\n\t\t.useFormFieldSet;\n\n\tif (useFormFieldSet) {\n\t\tconst formFieldSetProps = ({ ...props } as unknown) as FormFieldSetProps<any>;\n\t\treturn (\n\t\t\t<FormFieldSet\n\t\t\t\t{...formFieldSetProps}\n\t\t\t\tid={`${id}-fieldset`}\n\t\t\t\tchildrenGroupClassName={cx(childrenGroupClassName, 'margin-top-3')}\n\t\t\t>\n\t\t\t\t<InternalCheckboxGroup id={id} {...checkboxGroupProps} />\n\t\t\t</FormFieldSet>\n\t\t);\n\t}\n\n\tconst fieldSetProps = ({ ...props } as unknown) as FieldSetProps;\n\treturn (\n\t\t<FieldSet\n\t\t\t{...fieldSetProps}\n\t\t\tid={`${id}-fieldset`}\n\t\t\tchildrenGroupClassName={cx(childrenGroupClassName, 'margin-top-3')}\n\t\t>\n\t\t\t<InternalCheckboxGroup id={id} {...checkboxGroupProps} />\n\t\t</FieldSet>\n\t);\n};\n\n/**\n * Internal component for managing a group of related Checkboxes\n *\n * When each checkbox maps to an individual field, per-checkbox onChange function\n * should be defined in the CheckboxOption render func. Make sure to provide onChange\n * prop after spread props to overwrite props.onChange:\n * \t{\n *\t\trender: (props) => <Checkbox {...props} onChange={onChange} />\n * \t\t...\n * \t}\n *\n * For other cases where the checkbox group maps to a single field, and each checkbox\n * represents a value for that field that is handled in the same way, a group-level\n * onChange function can be defined. It will be passed in to each Checkbox.\n */\nconst InternalCheckboxGroup: React.FC<InternalCheckboxGroupProps & { id: string }> = ({\n\tid,\n\toptions,\n\tonChange = () => {},\n\tdefaultValue = [],\n}) => {\n\tconst selectedItemsOnInput = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\tconst [selectedItems, setSelectedItems] = useState(selectedItemsOnInput);\n\n\treturn (\n\t\t<>\n\t\t\t{options.map(({ render: Render, value, expansion }) => (\n\t\t\t\t<span\n\t\t\t\t\tkey={`${id}-${value}`}\n\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\tsetSelectedItems((items) => {\n\t\t\t\t\t\t\tif (items.includes(value)) {\n\t\t\t\t\t\t\t\treturn items.filter((i) => i !== value);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn [...items, value];\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Render id={value} selected={selectedItems.includes(value)} onChange={onChange} />\n\t\t\t\t\t{expansion && selectedItems.includes(value) && (\n\t\t\t\t\t\t<div className=\"oec-itemchooser-expansion\">{expansion}</div>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</>\n\t);\n};\ntry {\n    // @ts-ignore\n    CheckboxGroup.displayName = \"CheckboxGroup\";\n    // @ts-ignore\n    CheckboxGroup.__docgenInfo = { \"description\": \"Component for displaying a group of related Checkboxes.\\nRenders the checkbox group inside a FieldSet by default, or FormFieldSet\\nif FormFieldSetProps is provided as type param\", \"displayName\": \"CheckboxGroup\", \"props\": { \"options\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"options\", \"required\": true, \"type\": { \"name\": \"CheckboxOption[]\" } }, \"defaultValue\": { \"defaultValue\": { value: \"[]\" }, \"description\": \"\", \"name\": \"defaultValue\", \"required\": false, \"type\": { \"name\": \"string | string[]\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"onChange\": { \"defaultValue\": { value: \"() => {}\" }, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\"] = { docgenInfo: CheckboxGroup.__docgenInfo, name: \"CheckboxGroup\", path: \"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}