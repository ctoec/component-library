{"ast":null,"code":"import _objectWithoutProperties from \"/home/melanie/Code/component-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/melanie/Code/component-library/src/components/Form_New/FormField.tsx\";\n\nimport React from 'react';\nimport FormContext, { useGenericContext } from './FormContext';\nimport produce from 'immer';\nimport set from 'lodash/set';\n/**\n * Generic form input field component that handles simple use cases,\n * where the data displayed in the field and updated by the user maps\n * directly to the necessary updates to form data state.\n *\n * For complex use cases (e.g. adding or removing array element),\n * custom form field components should be created\n */\n// TData must extend object for lodash set.\n// TComponentProps must extend {} for React.\n\nvar FormField = function FormField(_ref) {\n  var getValue = _ref.getValue,\n      defaultValue = _ref.defaultValue,\n      preprocessForDisplay = _ref.preprocessForDisplay,\n      parseOnChangeEvent = _ref.parseOnChangeEvent,\n      _ref$status = _ref.status,\n      status = _ref$status === void 0 ? function () {\n    return undefined;\n  } : _ref$status,\n      InputComponent = _ref.inputComponent,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"getValue\", \"defaultValue\", \"preprocessForDisplay\", \"parseOnChangeEvent\", \"status\", \"inputComponent\", \"children\"]);\n\n  var _useGenericContext = useGenericContext(FormContext),\n      data = _useGenericContext.data,\n      dataDriller = _useGenericContext.dataDriller,\n      updateData = _useGenericContext.updateData;\n\n  var accessor = getValue(dataDriller);\n  var value = accessor.value;\n  var updatePath = accessor.path;\n\n  var onChange = function onChange(e) {\n    var processedData = parseOnChangeEvent(e, dataDriller);\n    updateData(produce(data, function (draft) {\n      return set(draft, updatePath, processedData);\n    }));\n  };\n\n  var displayValue = value != null // checks null and undefined\n  ? value : defaultValue;\n  return /*#__PURE__*/React.createElement(InputComponent, Object.assign({\n    defaultValue: preprocessForDisplay ? preprocessForDisplay(displayValue) : displayValue,\n    onChange: onChange,\n    status: status(dataDriller)\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }\n  }), children);\n};\n\nexport default FormField;\n\ntry {\n  // @ts-ignore\n  FormField.displayName = \"FormField\"; // @ts-ignore\n\n  FormField.__docgenInfo = {\n    \"description\": \"Generic form input field component that handles simple use cases,\\nwhere the data displayed in the field and updated by the user maps\\ndirectly to the necessary updates to form data state.\\n\\nFor complex use cases (e.g. adding or removing array element),\\ncustom form field components should be created\",\n    \"displayName\": \"FormField\",\n    \"props\": {\n      \"defaultValue\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"defaultValue\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"TFieldData\"\n        }\n      },\n      \"getValue\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getValue\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(_: TObjectDriller<NonNullable<TData>>) => TObjectDriller<TFieldData>\"\n        }\n      },\n      \"preprocessForDisplay\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"preprocessForDisplay\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(_: TFieldData) => string | Element | TFieldData\"\n        }\n      },\n      \"parseOnChangeEvent\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"parseOnChangeEvent\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(event: any, data: TObjectDriller<TData>) => TFieldData\"\n        }\n      },\n      \"status\": {\n        \"defaultValue\": {\n          value: \"() => undefined\"\n        },\n        \"description\": \"\",\n        \"name\": \"status\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"any\"\n        }\n      },\n      \"inputComponent\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"inputComponent\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"any\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormField.tsx#FormField\"] = {\n      docgenInfo: FormField.__docgenInfo,\n      name: \"FormField\",\n      path: \"src/components/Form_New/FormField.tsx#FormField\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}","map":{"version":3,"sources":["/home/melanie/Code/component-library/src/components/Form_New/FormField.tsx"],"names":["FormField","getValue","defaultValue","preprocessForDisplay","parseOnChangeEvent","status","inputComponent","InputComponent","children","props","data","dataDriller","updateData","useGenericContext","accessor","value","updatePath","onChange","processedData","produce","set","displayValue","STORYBOOK_REACT_CLASSES","docgenInfo","name","path"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport FormContext, { useGenericContext } from './FormContext';\nimport produce from 'immer';\nimport set from 'lodash/set';\nimport { TObjectDriller } from './ObjectDriller';\nimport { FormStatusFunc } from './FormStatusFunc';\n\ntype FormFieldProps<TData, TComponentProps, TFieldData> =\n\t// React.FC<P> assigns the generic P to {} as a default type. That causes a\n\t// subtype contrainst error. See https://stackoverflow.com/a/59363875. As a\n\t// work around, we can conditionally check that TComponentProps extends {}.\n\tTComponentProps extends {}\n\t\t? {\n\t\t\t\tdefaultValue?: TFieldData;\n\t\t\t\tgetValue: (_: TObjectDriller<NonNullable<TData>>) => TObjectDriller<TFieldData>;\n\t\t\t\tpreprocessForDisplay?: (\n\t\t\t\t\t_: TFieldData | undefined\n\t\t\t\t) => TFieldData | JSX.Element | string | undefined;\n\t\t\t\tparseOnChangeEvent: (\n\t\t\t\t\tevent: React.ChangeEvent<any>,\n\t\t\t\t\tdata: TObjectDriller<TData>\n\t\t\t\t) => TFieldData;\n\t\t\t\tstatus?: FormStatusFunc<TData>;\n\t\t\t\tinputComponent: React.FC<TComponentProps>;\n\t\t  } & /* Include TComponentProps props, except onChange, defaultValue, and status */ Pick<\n\t\t\t\tTComponentProps,\n\t\t\t\tExclude<keyof TComponentProps, 'onChange' | 'defaultValue' | 'status'>\n\t\t  > /*\n\t\t\tIf TComponentProps does not extend {}, React will choke on creating\n\t\t\tthe component. So don't allow this case.\n\t\t*/\n\t\t: never;\n\n/**\n * Generic form input field component that handles simple use cases,\n * where the data displayed in the field and updated by the user maps\n * directly to the necessary updates to form data state.\n *\n * For complex use cases (e.g. adding or removing array element),\n * custom form field components should be created\n */\n// TData must extend object for lodash set.\n// TComponentProps must extend {} for React.\nconst FormField = <TData extends object, TComponentProps extends {}, TFieldData>({\n\tgetValue,\n\tdefaultValue,\n\tpreprocessForDisplay,\n\tparseOnChangeEvent,\n\tstatus = () => undefined,\n\tinputComponent: InputComponent,\n\tchildren,\n\t...props\n}: PropsWithChildren<FormFieldProps<TData, TComponentProps, TFieldData>>) => {\n\tconst { data, dataDriller, updateData } = useGenericContext<TData>(FormContext);\n\n\tconst accessor = getValue(dataDriller);\n\tconst value = accessor.value;\n\tconst updatePath = accessor.path;\n\n\tconst onChange = (e: React.ChangeEvent<any>) => {\n\t\tconst processedData = parseOnChangeEvent(e, dataDriller);\n\t\tupdateData(\n\t\t\tproduce<TData>(data, (draft) => set(draft, updatePath, processedData))\n\t\t);\n\t};\n\n\tconst displayValue =\n\t\tvalue != null // checks null and undefined\n\t\t\t? value\n\t\t\t: defaultValue;\n\treturn (\n\t\t<InputComponent\n\t\t\tdefaultValue={preprocessForDisplay ? preprocessForDisplay(displayValue) : displayValue}\n\t\t\tonChange={onChange}\n\t\t\tstatus={status(dataDriller)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</InputComponent>\n\t);\n};\n\nexport default FormField;\ntry {\n    // @ts-ignore\n    FormField.displayName = \"FormField\";\n    // @ts-ignore\n    FormField.__docgenInfo = { \"description\": \"Generic form input field component that handles simple use cases,\\nwhere the data displayed in the field and updated by the user maps\\ndirectly to the necessary updates to form data state.\\n\\nFor complex use cases (e.g. adding or removing array element),\\ncustom form field components should be created\", \"displayName\": \"FormField\", \"props\": { \"defaultValue\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"defaultValue\", \"required\": false, \"type\": { \"name\": \"TFieldData\" } }, \"getValue\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getValue\", \"required\": true, \"type\": { \"name\": \"(_: TObjectDriller<NonNullable<TData>>) => TObjectDriller<TFieldData>\" } }, \"preprocessForDisplay\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"preprocessForDisplay\", \"required\": false, \"type\": { \"name\": \"(_: TFieldData) => string | Element | TFieldData\" } }, \"parseOnChangeEvent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"parseOnChangeEvent\", \"required\": true, \"type\": { \"name\": \"(event: any, data: TObjectDriller<TData>) => TFieldData\" } }, \"status\": { \"defaultValue\": { value: \"() => undefined\" }, \"description\": \"\", \"name\": \"status\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"inputComponent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"inputComponent\", \"required\": true, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Form_New/FormField.tsx#FormField\"] = { docgenInfo: FormField.__docgenInfo, name: \"FormField\", path: \"src/components/Form_New/FormField.tsx#FormField\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}