{"ast":null,"code":"import _defineProperty from\"/home/melanie/Code/component-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import React from'react';import{FormStatus}from'..';import cx from'classnames';/**\n * Accessibility-following wrapping component for a native fieldset element\n */export var FieldSet=function FieldSet(_ref){var _cx2;var legend=_ref.legend,id=_ref.id,showLegend=_ref.showLegend,_ref$legendStyle=_ref.legendStyle,legendStyle=_ref$legendStyle===void 0?'normal':_ref$legendStyle,status=_ref.status,optional=_ref.optional,className=_ref.className,children=_ref.children,hint=_ref.hint,_ref$horizontal=_ref.horizontal,horizontal=_ref$horizontal===void 0?false:_ref$horizontal,childrenGroupClassName=_ref.childrenGroupClassName,disabled=_ref.disabled;var hintId=\"\".concat(id,\"-hint\");var ariaDescriber;if(hint){ariaDescriber=hintId;}if(status){ariaDescriber=status.id;}return/*#__PURE__*/React.createElement(\"fieldset\",{className:cx('grid-gap','grid-row','usa-fieldset',_defineProperty({},\"usa-fieldset--\".concat(status&&status.type),status),className),id:id,\"aria-describedby\":ariaDescriber// TODO: is this bad usability? are things that aren't optional always required?\n,\"aria-required\":!optional,\"aria-invalid\":status&&status.type==='error',disabled:disabled},/*#__PURE__*/React.createElement(\"legend\",{id:\"fieldset-legend-\".concat(id)},/*#__PURE__*/React.createElement(\"span\",{className:cx((_cx2={'usa-label':showLegend,'usa-sr-only':!showLegend},_defineProperty(_cx2,\"usa-label--\".concat(status&&status.type),showLegend&&status),_defineProperty(_cx2,'text-bold font-sans-lg',showLegend&&legendStyle==='title'),_cx2))},legend,optional&&/*#__PURE__*/React.createElement(\"span\",{className:\"usa-hint\"},\"\\xA0(optional)\"))),hint&&/*#__PURE__*/React.createElement(\"span\",{className:\"usa-hint text-italic\"},hint),status&&/*#__PURE__*/React.createElement(FormStatus,status),/*#__PURE__*/React.createElement(\"div\",{className:cx('grid-gap',childrenGroupClassName,{'grid-row flex-align-start':!horizontal},{'grid-col':horizontal})},children));};try{// @ts-ignore\nFieldSet.displayName=\"FieldSet\";// @ts-ignore\nFieldSet.__docgenInfo={\"description\":\"Accessibility-following wrapping component for a native fieldset element\",\"displayName\":\"FieldSet\",\"props\":{}};// @ts-ignore\nif(typeof STORYBOOK_REACT_CLASSES!==\"undefined\")// @ts-ignore\nSTORYBOOK_REACT_CLASSES[\"src/components/FieldSet/FieldSet.tsx#FieldSet\"]={docgenInfo:FieldSet.__docgenInfo,name:\"FieldSet\",path:\"src/components/FieldSet/FieldSet.tsx#FieldSet\"};}catch(__react_docgen_typescript_loader_error){}","map":{"version":3,"sources":["/home/melanie/Code/component-library/src/components/FieldSet/FieldSet.tsx"],"names":["FieldSet","legend","id","showLegend","legendStyle","status","optional","className","children","hint","horizontal","childrenGroupClassName","disabled","hintId","ariaDescriber","cx","STORYBOOK_REACT_CLASSES","docgenInfo","name","path"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormStatus, FormStatusProps } from '..';\nimport cx from 'classnames';\n\nexport type FieldSetProps = {\n\tlegend: string;\n\tid: string;\n\tshowLegend?: boolean;\n\tlegendStyle?: 'normal' | 'title';\n\tstatus?: FormStatusProps;\n\toptional?: boolean;\n\tclassName?: string;\n\thint?: string;\n\thorizontal?: boolean;\n\tchildrenGroupClassName?: string;\n\tdisabled?: boolean;\n};\n\n/**\n * Accessibility-following wrapping component for a native fieldset element\n */\nexport const FieldSet: React.FC<FieldSetProps> = ({\n\tlegend,\n\tid,\n\tshowLegend,\n\tlegendStyle = 'normal',\n\tstatus,\n\toptional,\n\tclassName,\n\tchildren,\n\thint,\n\thorizontal = false,\n\tchildrenGroupClassName,\n\tdisabled,\n}) => {\n\tconst hintId = `${id}-hint`;\n\tlet ariaDescriber;\n\tif (hint) {\n\t\tariaDescriber = hintId;\n\t}\n\tif (status) {\n\t\tariaDescriber = status.id;\n\t}\n\n\treturn (\n\t\t<fieldset\n\t\t\tclassName={cx(\n\t\t\t\t'grid-gap',\n\t\t\t\t'grid-row',\n\t\t\t\t'usa-fieldset',\n\t\t\t\t{\n\t\t\t\t\t[`usa-fieldset--${status && status.type}`]: status,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tid={id}\n\t\t\taria-describedby={ariaDescriber}\n\t\t\t// TODO: is this bad usability? are things that aren't optional always required?\n\t\t\taria-required={!optional}\n\t\t\taria-invalid={status && status.type === 'error'}\n\t\t\tdisabled={disabled}\n\t\t>\n\t\t\t<legend id={`fieldset-legend-${id}`}>\n\t\t\t\t{/* Needs to be wrapped in another el because spacing works differently for legends */}\n\t\t\t\t<span\n\t\t\t\t\tclassName={cx({\n\t\t\t\t\t\t'usa-label': showLegend,\n\t\t\t\t\t\t'usa-sr-only': !showLegend,\n\t\t\t\t\t\t[`usa-label--${status && status.type}`]: showLegend && status,\n\t\t\t\t\t\t'text-bold font-sans-lg': showLegend && legendStyle === 'title',\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{legend}\n\t\t\t\t\t{optional && <span className=\"usa-hint\">&nbsp;(optional)</span>}\n\t\t\t\t</span>\n\t\t\t</legend>\n\t\t\t{hint && <span className=\"usa-hint text-italic\">{hint}</span>}\n\t\t\t{status && <FormStatus {...status} />}\n\t\t\t<div\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'grid-gap',\n\t\t\t\t\tchildrenGroupClassName,\n\t\t\t\t\t{ 'grid-row flex-align-start': !horizontal },\n\t\t\t\t\t{ 'grid-col': horizontal }\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</fieldset>\n\t);\n};\ntry {\n    // @ts-ignore\n    FieldSet.displayName = \"FieldSet\";\n    // @ts-ignore\n    FieldSet.__docgenInfo = { \"description\": \"Accessibility-following wrapping component for a native fieldset element\", \"displayName\": \"FieldSet\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/FieldSet/FieldSet.tsx#FieldSet\"] = { docgenInfo: FieldSet.__docgenInfo, name: \"FieldSet\", path: \"src/components/FieldSet/FieldSet.tsx#FieldSet\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}