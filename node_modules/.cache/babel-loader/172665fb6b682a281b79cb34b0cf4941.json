{"ast":null,"code":"import _toConsumableArray from \"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/app/src/components/CheckboxGroup/CheckboxGroup.tsx\";\n\nimport React, { useState } from 'react';\nimport { FormFieldSet } from '../Form_New';\nimport { FieldSet } from '../FieldSet/FieldSet';\nimport cx from 'classnames';\n/**\n * Type for the values that will define\n * a single Checkbox option in the CheckboxGroup\n */\n\n/**\n * Component for displaying a group of related Checkboxes.\n * Renders the checkbox group inside a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */\n\nexport var CheckboxGroup = function CheckboxGroup(_ref) {\n  var id = _ref.id,\n      childrenGroupClassName = _ref.childrenGroupClassName,\n      props = _objectWithoutProperties(_ref, [\"id\", \"childrenGroupClassName\"]);\n\n  var checkboxGroupProps = _objectSpread({}, props);\n\n  var useFormFieldSet = props.useFormFieldSet;\n\n  if (useFormFieldSet) {\n    var formFieldSetProps = _objectSpread({}, props);\n\n    return /*#__PURE__*/React.createElement(FormFieldSet, Object.assign({}, formFieldSetProps, {\n      id: \"\".concat(id, \"-fieldset\"),\n      childrenGroupClassName: cx(childrenGroupClassName, 'margin-top-3'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(InternalCheckboxGroup, Object.assign({\n      id: id\n    }, checkboxGroupProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    })));\n  }\n\n  var fieldSetProps = _objectSpread({}, props);\n\n  return /*#__PURE__*/React.createElement(FieldSet, Object.assign({}, fieldSetProps, {\n    id: \"\".concat(id, \"-fieldset\"),\n    childrenGroupClassName: cx(childrenGroupClassName, 'margin-top-3'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(InternalCheckboxGroup, Object.assign({\n    id: id\n  }, checkboxGroupProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }\n  })));\n};\n/**\n * Internal component for managing a group of related Checkboxes\n *\n * When each checkbox maps to an individual field, per-checkbox onChange function\n * should be defined in the CheckboxOption render func. Make sure to provide onChange\n * prop after spread props to overwrite props.onChange:\n * \t{\n *\t\trender: (props) => <Checkbox {...props} onChange={onChange} />\n * \t\t...\n * \t}\n *\n * For other cases where the checkbox group maps to a single field, and each checkbox\n * represents a value for that field that is handled in the same way, a group-level\n * onChange function can be defined. It will be passed in to each Checkbox.\n */\n\nvar InternalCheckboxGroup = function InternalCheckboxGroup(_ref2) {\n  var id = _ref2.id,\n      options = _ref2.options,\n      _ref2$onChange = _ref2.onChange,\n      onChange = _ref2$onChange === void 0 ? function () {} : _ref2$onChange,\n      _ref2$defaultValue = _ref2.defaultValue,\n      defaultValue = _ref2$defaultValue === void 0 ? [] : _ref2$defaultValue;\n  var selectedItemsOnInput = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n  var _useState = useState(selectedItemsOnInput),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedItems = _useState2[0],\n      setSelectedItems = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, options.map(function (_ref3) {\n    var Render = _ref3.render,\n        value = _ref3.value,\n        expansion = _ref3.expansion;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: \"\".concat(id, \"-\").concat(value),\n      onChange: function onChange() {\n        setSelectedItems(function (items) {\n          if (items.includes(value)) {\n            return items.filter(function (i) {\n              return i !== value;\n            });\n          }\n\n          return [].concat(_toConsumableArray(items), [value]);\n        });\n        return false;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Render, {\n      id: value,\n      selected: selectedItems.includes(value),\n      onChange: onChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 6\n      }\n    }), expansion && selectedItems.includes(value) && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"oec-itemchooser-expansion\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, expansion));\n  }));\n};\n\ntry {\n  // @ts-ignore\n  CheckboxGroup.displayName = \"CheckboxGroup\"; // @ts-ignore\n\n  CheckboxGroup.__docgenInfo = {\n    \"description\": \"Component for displaying a group of related Checkboxes.\\nRenders the checkbox group inside a FieldSet by default, or FormFieldSet\\nif FormFieldSetProps is provided as type param\",\n    \"displayName\": \"CheckboxGroup\",\n    \"props\": {\n      \"options\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"options\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"CheckboxOption[]\"\n        }\n      },\n      \"defaultValue\": {\n        \"defaultValue\": {\n          value: \"[]\"\n        },\n        \"description\": \"\",\n        \"name\": \"defaultValue\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string | string[]\"\n        }\n      },\n      \"name\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"name\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"onChange\": {\n        \"defaultValue\": {\n          value: \"() => {}\"\n        },\n        \"description\": \"\",\n        \"name\": \"onChange\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"any\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\"] = {\n      docgenInfo: CheckboxGroup.__docgenInfo,\n      name: \"CheckboxGroup\",\n      path: \"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}","map":{"version":3,"sources":["/home/app/src/components/CheckboxGroup/CheckboxGroup.tsx"],"names":["CheckboxGroup","id","childrenGroupClassName","props","checkboxGroupProps","useFormFieldSet","formFieldSetProps","cx","fieldSetProps","InternalCheckboxGroup","options","onChange","defaultValue","selectedItemsOnInput","Array","selectedItems","setSelectedItems","useState","Render","value","expansion","items","i","STORYBOOK_REACT_CLASSES","docgenInfo","name","path"],"mappings":";;;;;;;;AAAA,OAAA,KAAA,IAAA,QAAA,QAAA,OAAA;AAEA,SAAA,YAAA,QAAA,aAAA;AACA,SAAA,QAAA,QAAA,sBAAA;AACA,OAAA,EAAA,MAAA,YAAA;AAEA;;;;;AAoCA;;;;;;AAKA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAMa;AAAA,MAHzCC,EAGyC,GAAA,IAAA,CAHzCA,EAGyC;AAAA,MAFzCC,sBAEyC,GAAA,IAAA,CAFzCA,sBAEyC;AAAA,MADtCC,KACsC,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,wBAAA,CAAA,CAAA;;AACzC,MAAMC,kBAAkB,GAAA,aAAA,CAAA,EAAA,EAAxB,KAAwB,CAAxB;;AAEA,MAAMC,eAAe,GAAKF,KAAF,CAAxB,eAAA;;AAGA,MAAA,eAAA,EAAqB;AACpB,QAAMG,iBAAiB,GAAA,aAAA,CAAA,EAAA,EAAvB,KAAuB,CAAvB;;AACA,WAAA,aACC,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,iBAAA,EAAA;AAEC,MAAA,EAAE,EAAA,GAAA,MAAA,CAAA,EAAA,EAFH,WAEG,CAFH;AAGC,MAAA,sBAAsB,EAAEC,EAAE,CAAA,sBAAA,EAH3B,cAG2B,CAH3B;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,CAAA,EAAA,aAKC,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAuB,MAAA,EAAE,EAAEN;AAA3B,KAAA,EAAA,kBAAA,EAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,CAAA,CALD,CADD;AASA;;AAED,MAAMO,aAAa,GAAA,aAAA,CAAA,EAAA,EAAnB,KAAmB,CAAnB;;AACA,SAAA,aACC,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAEC,IAAA,EAAE,EAAA,GAAA,MAAA,CAAA,EAAA,EAFH,WAEG,CAFH;AAGC,IAAA,sBAAsB,EAAED,EAAE,CAAA,sBAAA,EAH3B,cAG2B,CAH3B;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAAA,aAKC,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAuB,IAAA,EAAE,EAAEN;AAA3B,GAAA,EAAA,kBAAA,EAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,CALD,CADD;AA1BM,CAAA;AAqCP;;;;;;;;;;;;;;;;AAeA,IAAMQ,qBAA4E,GAAG,SAA/EA,qBAA+E,CAAA,KAAA,EAK/E;AAAA,MAJLR,EAIK,GAAA,KAAA,CAJLA,EAIK;AAAA,MAHLS,OAGK,GAAA,KAAA,CAHLA,OAGK;AAAA,MAAA,cAAA,GAAA,KAAA,CAFLC,QAEK;AAAA,MAFLA,QAEK,GAAA,cAAA,KAAA,KAAA,CAAA,GAFM,YAAM,CAEZ,CAAA,GAAA,cAAA;AAAA,MAAA,kBAAA,GAAA,KAAA,CADLC,YACK;AAAA,MADLA,YACK,GAAA,kBAAA,KAAA,KAAA,CAAA,GADU,EACV,GAAA,kBAAA;AACL,MAAMC,oBAAoB,GAAGC,KAAK,CAALA,OAAAA,CAAAA,YAAAA,IAAAA,YAAAA,GAA6C,CAA1E,YAA0E,CAA1E;;AADK,MAAA,SAAA,GAEqCG,QAAQ,CAF7C,oBAE6C,CAF7C;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAEEF,aAFF,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAEiBC,gBAFjB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAIL,SAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,OAAO,CAAP,GAAA,CAAY,UAAA,KAAA,EAAA;AAAA,QAAWE,MAAX,GAAA,KAAA,CAAA,MAAA;AAAA,QAAmBC,KAAnB,GAAA,KAAA,CAAA,KAAA;AAAA,QAA0BC,SAA1B,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,aACZ,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACC,MAAA,GAAG,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CADJ,KACI,CADJ;AAEC,MAAA,QAAQ,EAAE,SAAA,QAAA,GAAM;AACfJ,QAAAA,gBAAgB,CAAC,UAAA,KAAA,EAAW;AAC3B,cAAIK,KAAK,CAALA,QAAAA,CAAJ,KAAIA,CAAJ,EAA2B;AAC1B,mBAAO,KAAK,CAAL,MAAA,CAAa,UAAA,CAAA,EAAA;AAAA,qBAAOC,CAAC,KAAR,KAAA;AAApB,aAAO,CAAP;AACA;;AAED,iBAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA;AALDN,SAAgB,CAAhBA;AAOA,eAAA,KAAA;AAVF,OAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,GAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,EAAA,aAaC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,MAAA,EAAE,EAAV,KAAA;AAAmB,MAAA,QAAQ,EAAED,aAAa,CAAbA,QAAAA,CAA7B,KAA6BA,CAA7B;AAA4D,MAAA,QAAQ,EAApE,QAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,GAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,CAbD,EAcEK,SAAS,IAAIL,aAAa,CAAbA,QAAAA,CAAbK,KAAaL,CAAbK,IAAAA,aACA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAd,2BAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,GAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,EAhBU,SAgBV,CAfF,CADY;AAFf,GAEG,CADF,CADD;AATD,CAAA;;AAkCA,IAAI;AACA;AACApB,EAAAA,aAAa,CAAbA,WAAAA,GAFA,eAEAA,CAFA,CAGA;;AACAA,EAAAA,aAAa,CAAbA,YAAAA,GAA6B;AAAE,mBAAF,mLAAA;AAAsM,mBAAtM,eAAA;AAAsO,aAAS;AAAE,iBAAW;AAAE,wBAAF,IAAA;AAAwB,uBAAxB,EAAA;AAA2C,gBAA3C,SAAA;AAA8D,oBAA9D,IAAA;AAAgF,gBAAQ;AAAE,kBAAQ;AAAV;AAAxF,OAAb;AAAuI,sBAAgB;AAAE,wBAAgB;AAAEmB,UAAAA,KAAK,EAAE;AAAT,SAAlB;AAAmC,uBAAnC,EAAA;AAAsD,gBAAtD,cAAA;AAA8E,oBAA9E,KAAA;AAAiG,gBAAQ;AAAE,kBAAQ;AAAV;AAAzG,OAAvJ;AAAmS,cAAQ;AAAE,wBAAF,IAAA;AAAwB,uBAAxB,EAAA;AAA2C,gBAA3C,MAAA;AAA2D,oBAA3D,KAAA;AAA8E,gBAAQ;AAAE,kBAAQ;AAAV;AAAtF,OAA3S;AAAyZ,kBAAY;AAAE,wBAAgB;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAlB;AAAyC,uBAAzC,EAAA;AAA4D,gBAA5D,UAAA;AAAgF,oBAAhF,KAAA;AAAmG,gBAAQ;AAAE,kBAAQ;AAAV;AAA3G;AAAra;AAA/O,GAA7BnB,CAJA,CAKA;;AACA,MAAI,OAAA,uBAAA,KAAJ,WAAA,EACI;AACAuB,IAAAA,uBAAuB,CAAvBA,8DAAuB,CAAvBA,GAA0F;AAAEC,MAAAA,UAAU,EAAExB,aAAa,CAA3B,YAAA;AAA0CyB,MAAAA,IAAI,EAA9C,eAAA;AAAiEC,MAAAA,IAAI,EAAE;AAAvE,KAA1FH;AARR,CAAA,CAUA,OAAA,sCAAA,EAA+C,CAAG","sourcesContent":["import React, { useState } from 'react';\nimport { FieldSetProps } from '..';\nimport { FormFieldSetProps, FormFieldSet } from '../Form_New';\nimport { FieldSet } from '../FieldSet/FieldSet';\nimport cx from 'classnames';\n\n/**\n * Type for the values that will define\n * a single Checkbox option in the CheckboxGroup\n */\nexport type CheckboxOption = {\n\trender: (props: {\n\t\tid: string;\n\t\tselected: boolean;\n\t\tonChange: React.ChangeEventHandler<HTMLInputElement>;\n\t}) => JSX.Element;\n\tvalue: string;\n\texpansion?: React.ReactNode;\n};\n\n/**\n * Props for InternalCheckboxGroup\n */\ntype InternalCheckboxGroupProps = {\n\toptions: CheckboxOption[];\n\tdefaultValue?: string | string[];\n\tname?: string;\n\tonChange?: React.ChangeEventHandler<HTMLInputElement>;\n};\n\n/**\n * Props for CheckboxGroup, which includes props for InternalCheckboxGroup,\n * props for the wrapping field set (FieldSet or FormFieldSet),\n * and conditionally a flag to indicate which type of field set should be used\n */\nexport type CheckboxGroupProps<\n\tTFieldSetProps extends FieldSetProps | FormFieldSetProps<any>\n> = InternalCheckboxGroupProps &\n\t(TFieldSetProps extends FormFieldSetProps<infer T>\n\t\t? { useFormFieldSet: true } & FormFieldSetProps<T>\n\t\t: FieldSetProps);\n\n/**\n * Component for displaying a group of related Checkboxes.\n * Renders the checkbox group inside a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */\nexport const CheckboxGroup = <\n\tTFieldSetProps extends FieldSetProps | FormFieldSetProps<any> = FieldSetProps\n>({\n\tid,\n\tchildrenGroupClassName,\n\t...props\n}: CheckboxGroupProps<TFieldSetProps>) => {\n\tconst checkboxGroupProps = { ...props } as InternalCheckboxGroupProps;\n\n\tconst useFormFieldSet = ((props as unknown) as CheckboxGroupProps<FormFieldSetProps<any>>)\n\t\t.useFormFieldSet;\n\n\tif (useFormFieldSet) {\n\t\tconst formFieldSetProps = ({ ...props } as unknown) as FormFieldSetProps<any>;\n\t\treturn (\n\t\t\t<FormFieldSet\n\t\t\t\t{...formFieldSetProps}\n\t\t\t\tid={`${id}-fieldset`}\n\t\t\t\tchildrenGroupClassName={cx(childrenGroupClassName, 'margin-top-3')}\n\t\t\t>\n\t\t\t\t<InternalCheckboxGroup id={id} {...checkboxGroupProps} />\n\t\t\t</FormFieldSet>\n\t\t);\n\t}\n\n\tconst fieldSetProps = ({ ...props } as unknown) as FieldSetProps;\n\treturn (\n\t\t<FieldSet\n\t\t\t{...fieldSetProps}\n\t\t\tid={`${id}-fieldset`}\n\t\t\tchildrenGroupClassName={cx(childrenGroupClassName, 'margin-top-3')}\n\t\t>\n\t\t\t<InternalCheckboxGroup id={id} {...checkboxGroupProps} />\n\t\t</FieldSet>\n\t);\n};\n\n/**\n * Internal component for managing a group of related Checkboxes\n *\n * When each checkbox maps to an individual field, per-checkbox onChange function\n * should be defined in the CheckboxOption render func. Make sure to provide onChange\n * prop after spread props to overwrite props.onChange:\n * \t{\n *\t\trender: (props) => <Checkbox {...props} onChange={onChange} />\n * \t\t...\n * \t}\n *\n * For other cases where the checkbox group maps to a single field, and each checkbox\n * represents a value for that field that is handled in the same way, a group-level\n * onChange function can be defined. It will be passed in to each Checkbox.\n */\nconst InternalCheckboxGroup: React.FC<InternalCheckboxGroupProps & { id: string }> = ({\n\tid,\n\toptions,\n\tonChange = () => {},\n\tdefaultValue = [],\n}) => {\n\tconst selectedItemsOnInput = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\tconst [selectedItems, setSelectedItems] = useState(selectedItemsOnInput);\n\n\treturn (\n\t\t<>\n\t\t\t{options.map(({ render: Render, value, expansion }) => (\n\t\t\t\t<span\n\t\t\t\t\tkey={`${id}-${value}`}\n\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\tsetSelectedItems((items) => {\n\t\t\t\t\t\t\tif (items.includes(value)) {\n\t\t\t\t\t\t\t\treturn items.filter((i) => i !== value);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn [...items, value];\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Render id={value} selected={selectedItems.includes(value)} onChange={onChange} />\n\t\t\t\t\t{expansion && selectedItems.includes(value) && (\n\t\t\t\t\t\t<div className=\"oec-itemchooser-expansion\">{expansion}</div>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</>\n\t);\n};\ntry {\n    // @ts-ignore\n    CheckboxGroup.displayName = \"CheckboxGroup\";\n    // @ts-ignore\n    CheckboxGroup.__docgenInfo = { \"description\": \"Component for displaying a group of related Checkboxes.\\nRenders the checkbox group inside a FieldSet by default, or FormFieldSet\\nif FormFieldSetProps is provided as type param\", \"displayName\": \"CheckboxGroup\", \"props\": { \"options\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"options\", \"required\": true, \"type\": { \"name\": \"CheckboxOption[]\" } }, \"defaultValue\": { \"defaultValue\": { value: \"[]\" }, \"description\": \"\", \"name\": \"defaultValue\", \"required\": false, \"type\": { \"name\": \"string | string[]\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"onChange\": { \"defaultValue\": { value: \"() => {}\" }, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\"] = { docgenInfo: CheckboxGroup.__docgenInfo, name: \"CheckboxGroup\", path: \"src/components/CheckboxGroup/CheckboxGroup.tsx#CheckboxGroup\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}