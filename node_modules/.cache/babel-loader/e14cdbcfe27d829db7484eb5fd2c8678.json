{"ast":null,"code":"import _slicedToArray from\"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from'react';import{FieldSet}from'../FieldSet/FieldSet';import{FormFieldSet}from'../Form_New/FormFieldSet';import cx from'classnames';/**\n * Type of the values that will define a\n * single RadioButton option in the RadioButtonGroup\n */ /**\n * Component for displaying a group of related RadioButtons.\n * Renders the radio button group in a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */export var RadioButtonGroup=function RadioButtonGroup(_ref){var id=_ref.id,childrenGroupClassName=_ref.childrenGroupClassName,props=_objectWithoutProperties(_ref,[\"id\",\"childrenGroupClassName\"]);var radioButtonGroupProps=props;var useFormFieldSet=props.useFormFieldSet;if(useFormFieldSet){var formFieldSetProps=props;return/*#__PURE__*/React.createElement(FormFieldSet,Object.assign({},formFieldSetProps,{id:\"\".concat(id,\"-fieldset\"),childrenGroupClassName:cx(childrenGroupClassName,'margin-top-3')}),/*#__PURE__*/React.createElement(InternalRadioButtonGroup,Object.assign({id:id},radioButtonGroupProps)));}var fieldSetProps=props;return/*#__PURE__*/React.createElement(FieldSet,Object.assign({},fieldSetProps,{id:\"\".concat(id,\"-fieldset\"),childrenGroupClassName:cx(childrenGroupClassName,'margin-top-3')}),/*#__PURE__*/React.createElement(InternalRadioButtonGroup,Object.assign({id:id},radioButtonGroupProps)));};/**\n * Internal component for managing a group of related RadioButtons\n *\n * When the radio group maps to a single field, and each button representes\n * a value for that field that is handled the same way, a group-level\n * onChange function can be defined. It will be passed into each RadioButton.\n * (Especially useful when creating a RadioButtonGroup FormField, where onChange\n * is created & defined behind the scenes by FormField)\n *\n * For more complex use cases, the group-level onChange can be omitted and/or\n * overwritten by a per-button onChange defined in the RadioButtonOption\n * render func. Make sure to provide onChange prop after spread props to overwrite\n * props.onChange :\n * \t{\n * \t\trender: (props) => <RadioButton {...props} onChange={thisButtonOnChange} />\n * \t\t...\n * \t}\n */var InternalRadioButtonGroup=function InternalRadioButtonGroup(_ref2){var id=_ref2.id,options=_ref2.options,_ref2$defaultValue=_ref2.defaultValue,defaultValue=_ref2$defaultValue===void 0?'':_ref2$defaultValue,name=_ref2.name,_ref2$onChange=_ref2.onChange,onChange=_ref2$onChange===void 0?function(){}:_ref2$onChange;var _useState=useState(defaultValue),_useState2=_slicedToArray(_useState,2),selectedItem=_useState2[0],setSelectedItem=_useState2[1];return/*#__PURE__*/React.createElement(React.Fragment,null,options.map(function(_ref3){var Render=_ref3.render,value=_ref3.value,expansion=_ref3.expansion;return/*#__PURE__*/React.createElement(\"span\",{key:\"\".concat(id,\"-\").concat(value),onChange:function onChange(){return setSelectedItem(value);}},/*#__PURE__*/React.createElement(Render,{selected:selectedItem===value,name:name,value:value,onChange:onChange}),expansion&&selectedItem===value&&/*#__PURE__*/React.createElement(\"div\",{className:\"oec-itemchooser-expansion\"},expansion));}));};try{// @ts-ignore\nRadioButtonGroup.displayName=\"RadioButtonGroup\";// @ts-ignore\nRadioButtonGroup.__docgenInfo={\"description\":\"Component for displaying a group of related RadioButtons.\\nRenders the radio button group in a FieldSet by default, or FormFieldSet\\nif FormFieldSetProps is provided as type param\",\"displayName\":\"RadioButtonGroup\",\"props\":{\"options\":{\"defaultValue\":null,\"description\":\"\",\"name\":\"options\",\"required\":true,\"type\":{\"name\":\"RadioOption[]\"}},\"defaultValue\":{\"defaultValue\":{value:\"\"},\"description\":\"\",\"name\":\"defaultValue\",\"required\":false,\"type\":{\"name\":\"string\"}},\"name\":{\"defaultValue\":null,\"description\":\"\",\"name\":\"name\",\"required\":true,\"type\":{\"name\":\"string\"}},\"onChange\":{\"defaultValue\":{value:\"() => {}\"},\"description\":\"\",\"name\":\"onChange\",\"required\":false,\"type\":{\"name\":\"any\"}}}};// @ts-ignore\nif(typeof STORYBOOK_REACT_CLASSES!==\"undefined\")// @ts-ignore\nSTORYBOOK_REACT_CLASSES[\"src/components/RadioButtonGroup/RadioButtonGroup.tsx#RadioButtonGroup\"]={docgenInfo:RadioButtonGroup.__docgenInfo,name:\"RadioButtonGroup\",path:\"src/components/RadioButtonGroup/RadioButtonGroup.tsx#RadioButtonGroup\"};}catch(__react_docgen_typescript_loader_error){}","map":{"version":3,"sources":["/home/app/src/components/RadioButtonGroup/RadioButtonGroup.tsx"],"names":["RadioButtonGroup","id","childrenGroupClassName","props","radioButtonGroupProps","useFormFieldSet","formFieldSetProps","cx","fieldSetProps","InternalRadioButtonGroup","options","defaultValue","name","onChange","selectedItem","setSelectedItem","useState","Render","value","expansion","STORYBOOK_REACT_CLASSES","docgenInfo","path"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { FieldSetProps, FieldSet } from '../FieldSet/FieldSet';\nimport { FormFieldSetProps, FormFieldSet } from '../Form_New/FormFieldSet';\nimport cx from 'classnames';\n\n/**\n * Type of the values that will define a\n * single RadioButton option in the RadioButtonGroup\n */\nexport type RadioOption = {\n\trender: (props: {\n\t\tselected: boolean;\n\t\tname: string;\n\t\tvalue: string;\n\t\tonChange: React.ChangeEventHandler<HTMLInputElement>;\n\t}) => JSX.Element;\n\tvalue: string;\n\texpansion?: React.ReactNode;\n};\n\n/**\n * Props for InternalRadioButtonGroup\n */\ntype InternalRadioButtonGroupProps = {\n\toptions: RadioOption[];\n\tdefaultValue?: string;\n\tname: string;\n\tonChange?: React.ChangeEventHandler<HTMLInputElement>;\n};\n\n/**\n * Props for RadioButtonGroup, which includes props for InternalRadioButtonGroup,\n * props for the wrapping field set(FieldSet or FormFieldSet),\n * and conditionally a flag to indicate when FormFieldSet is used\n */\nexport type RadioButtonGroupProps<\n\tTFieldSetProps extends FieldSetProps | FormFieldSetProps<any> = FieldSetProps\n> = InternalRadioButtonGroupProps &\n\t(TFieldSetProps extends FormFieldSetProps<infer T>\n\t\t? { useFormFieldSet: true } & FormFieldSetProps<T>\n\t\t: FieldSetProps);\n\n/**\n * Component for displaying a group of related RadioButtons.\n * Renders the radio button group in a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */\nexport const RadioButtonGroup = <\n\tTFormFieldSetProps extends FieldSetProps | FormFieldSetProps<any> = FieldSetProps\n>({\n\tid,\n\tchildrenGroupClassName,\n\t...props\n}: RadioButtonGroupProps<TFormFieldSetProps>) => {\n\tconst radioButtonGroupProps = props as InternalRadioButtonGroupProps;\n\tconst useFormFieldSet = ((props as unknown) as RadioButtonGroupProps<FormFieldSetProps<any>>)\n\t\t.useFormFieldSet;\n\n\tif (useFormFieldSet) {\n\t\tconst formFieldSetProps = (props as unknown) as FormFieldSetProps<any>;\n\t\treturn (\n\t\t\t<FormFieldSet\n\t\t\t\t{...formFieldSetProps}\n\t\t\t\tid={`${id}-fieldset`}\n\t\t\t\tchildrenGroupClassName={cx(childrenGroupClassName, 'margin-top-3')}\n\t\t\t>\n\t\t\t\t<InternalRadioButtonGroup id={id} {...radioButtonGroupProps} />\n\t\t\t</FormFieldSet>\n\t\t);\n\t}\n\n\tconst fieldSetProps = (props as unknown) as FieldSetProps;\n\treturn (\n\t\t<FieldSet\n\t\t\t{...fieldSetProps}\n\t\t\tid={`${id}-fieldset`}\n\t\t\tchildrenGroupClassName={cx(childrenGroupClassName, 'margin-top-3')}\n\t\t>\n\t\t\t<InternalRadioButtonGroup id={id} {...radioButtonGroupProps} />\n\t\t</FieldSet>\n\t);\n};\n/**\n * Internal component for managing a group of related RadioButtons\n *\n * When the radio group maps to a single field, and each button representes\n * a value for that field that is handled the same way, a group-level\n * onChange function can be defined. It will be passed into each RadioButton.\n * (Especially useful when creating a RadioButtonGroup FormField, where onChange\n * is created & defined behind the scenes by FormField)\n *\n * For more complex use cases, the group-level onChange can be omitted and/or\n * overwritten by a per-button onChange defined in the RadioButtonOption\n * render func. Make sure to provide onChange prop after spread props to overwrite\n * props.onChange :\n * \t{\n * \t\trender: (props) => <RadioButton {...props} onChange={thisButtonOnChange} />\n * \t\t...\n * \t}\n */\nconst InternalRadioButtonGroup: React.FC<InternalRadioButtonGroupProps & { id: string }> = ({\n\tid,\n\toptions,\n\tdefaultValue = '',\n\tname,\n\tonChange = () => {},\n}) => {\n\tconst [selectedItem, setSelectedItem] = useState(defaultValue);\n\n\treturn (\n\t\t<>\n\t\t\t{options.map(({ render: Render, value, expansion }) => (\n\t\t\t\t<span key={`${id}-${value}`} onChange={() => setSelectedItem(value)}>\n\t\t\t\t\t<Render selected={selectedItem === value} name={name} value={value} onChange={onChange} />\n\t\t\t\t\t{expansion && selectedItem === value && (\n\t\t\t\t\t\t<div className=\"oec-itemchooser-expansion\">{expansion}</div>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</>\n\t);\n};\ntry {\n    // @ts-ignore\n    RadioButtonGroup.displayName = \"RadioButtonGroup\";\n    // @ts-ignore\n    RadioButtonGroup.__docgenInfo = { \"description\": \"Component for displaying a group of related RadioButtons.\\nRenders the radio button group in a FieldSet by default, or FormFieldSet\\nif FormFieldSetProps is provided as type param\", \"displayName\": \"RadioButtonGroup\", \"props\": { \"options\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"options\", \"required\": true, \"type\": { \"name\": \"RadioOption[]\" } }, \"defaultValue\": { \"defaultValue\": { value: \"\" }, \"description\": \"\", \"name\": \"defaultValue\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"onChange\": { \"defaultValue\": { value: \"() => {}\" }, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/RadioButtonGroup/RadioButtonGroup.tsx#RadioButtonGroup\"] = { docgenInfo: RadioButtonGroup.__docgenInfo, name: \"RadioButtonGroup\", path: \"src/components/RadioButtonGroup/RadioButtonGroup.tsx#RadioButtonGroup\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}