{"ast":null,"code":"import _defineProperty from \"/home/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/app/src/components/FieldSet/FieldSet.tsx\";\n\nimport React from 'react';\nimport { FormStatus } from '..';\nimport cx from 'classnames';\n/**\n * Accessibility-following wrapping component for a native fieldset element\n */\n\nexport var FieldSet = function FieldSet(_ref) {\n  var _cx2;\n\n  var legend = _ref.legend,\n      id = _ref.id,\n      showLegend = _ref.showLegend,\n      _ref$legendStyle = _ref.legendStyle,\n      legendStyle = _ref$legendStyle === void 0 ? 'normal' : _ref$legendStyle,\n      status = _ref.status,\n      optional = _ref.optional,\n      className = _ref.className,\n      children = _ref.children,\n      hint = _ref.hint,\n      _ref$horizontal = _ref.horizontal,\n      horizontal = _ref$horizontal === void 0 ? false : _ref$horizontal,\n      childrenGroupClassName = _ref.childrenGroupClassName,\n      disabled = _ref.disabled;\n  var hintId = \"\".concat(id, \"-hint\");\n  var ariaDescriber;\n\n  if (hint) {\n    ariaDescriber = hintId;\n  }\n\n  if (status) {\n    ariaDescriber = status.id;\n  }\n\n  return /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: cx('grid-gap', 'grid-row', 'usa-fieldset', _defineProperty({}, \"usa-fieldset--\".concat(status && status.type), status), className),\n    id: id,\n    \"aria-describedby\": ariaDescriber // TODO: is this bad usability? are things that aren't optional always required?\n    ,\n    \"aria-required\": !optional,\n    \"aria-invalid\": status && status.type === 'error',\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    id: \"fieldset-legend-\".concat(id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: cx((_cx2 = {\n      'usa-label': showLegend,\n      'usa-sr-only': !showLegend\n    }, _defineProperty(_cx2, \"usa-label--\".concat(status && status.type), showLegend && status), _defineProperty(_cx2, 'text-bold font-sans-lg', showLegend && legendStyle === 'title'), _cx2)),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, legend, optional && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"usa-hint\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, \"\\xA0(optional)\"))), hint && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"usa-hint text-italic\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, hint), status && /*#__PURE__*/React.createElement(FormStatus, Object.assign({}, status, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: cx('grid-gap', childrenGroupClassName, {\n      'grid-row flex-align-start': !horizontal\n    }, {\n      'grid-col': horizontal\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }\n  }, children));\n};\n\ntry {\n  // @ts-ignore\n  FieldSet.displayName = \"FieldSet\"; // @ts-ignore\n\n  FieldSet.__docgenInfo = {\n    \"description\": \"Accessibility-following wrapping component for a native fieldset element\",\n    \"displayName\": \"FieldSet\",\n    \"props\": {}\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/FieldSet/FieldSet.tsx#FieldSet\"] = {\n      docgenInfo: FieldSet.__docgenInfo,\n      name: \"FieldSet\",\n      path: \"src/components/FieldSet/FieldSet.tsx#FieldSet\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}","map":{"version":3,"sources":["/home/app/src/components/FieldSet/FieldSet.tsx"],"names":["FieldSet","legend","id","showLegend","legendStyle","status","optional","className","children","hint","horizontal","childrenGroupClassName","disabled","hintId","ariaDescriber","cx","STORYBOOK_REACT_CLASSES","docgenInfo","name","path"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormStatus, FormStatusProps } from '..';\nimport cx from 'classnames';\n\nexport type FieldSetProps = {\n\tlegend: string;\n\tid: string;\n\tshowLegend?: boolean;\n\tlegendStyle?: 'normal' | 'title';\n\tstatus?: FormStatusProps;\n\toptional?: boolean;\n\tclassName?: string;\n\thint?: string;\n\thorizontal?: boolean;\n\tchildrenGroupClassName?: string;\n\tdisabled?: boolean;\n};\n\n/**\n * Accessibility-following wrapping component for a native fieldset element\n */\nexport const FieldSet: React.FC<FieldSetProps> = ({\n\tlegend,\n\tid,\n\tshowLegend,\n\tlegendStyle = 'normal',\n\tstatus,\n\toptional,\n\tclassName,\n\tchildren,\n\thint,\n\thorizontal = false,\n\tchildrenGroupClassName,\n\tdisabled,\n}) => {\n\tconst hintId = `${id}-hint`;\n\tlet ariaDescriber;\n\tif (hint) {\n\t\tariaDescriber = hintId;\n\t}\n\tif (status) {\n\t\tariaDescriber = status.id;\n\t}\n\n\treturn (\n\t\t<fieldset\n\t\t\tclassName={cx(\n\t\t\t\t'grid-gap',\n\t\t\t\t'grid-row',\n\t\t\t\t'usa-fieldset',\n\t\t\t\t{\n\t\t\t\t\t[`usa-fieldset--${status && status.type}`]: status,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tid={id}\n\t\t\taria-describedby={ariaDescriber}\n\t\t\t// TODO: is this bad usability? are things that aren't optional always required?\n\t\t\taria-required={!optional}\n\t\t\taria-invalid={status && status.type === 'error'}\n\t\t\tdisabled={disabled}\n\t\t>\n\t\t\t<legend id={`fieldset-legend-${id}`}>\n\t\t\t\t{/* Needs to be wrapped in another el because spacing works differently for legends */}\n\t\t\t\t<span\n\t\t\t\t\tclassName={cx({\n\t\t\t\t\t\t'usa-label': showLegend,\n\t\t\t\t\t\t'usa-sr-only': !showLegend,\n\t\t\t\t\t\t[`usa-label--${status && status.type}`]: showLegend && status,\n\t\t\t\t\t\t'text-bold font-sans-lg': showLegend && legendStyle === 'title',\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{legend}\n\t\t\t\t\t{optional && <span className=\"usa-hint\">&nbsp;(optional)</span>}\n\t\t\t\t</span>\n\t\t\t</legend>\n\t\t\t{hint && <span className=\"usa-hint text-italic\">{hint}</span>}\n\t\t\t{status && <FormStatus {...status} />}\n\t\t\t<div\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'grid-gap',\n\t\t\t\t\tchildrenGroupClassName,\n\t\t\t\t\t{ 'grid-row flex-align-start': !horizontal },\n\t\t\t\t\t{ 'grid-col': horizontal }\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</fieldset>\n\t);\n};\ntry {\n    // @ts-ignore\n    FieldSet.displayName = \"FieldSet\";\n    // @ts-ignore\n    FieldSet.__docgenInfo = { \"description\": \"Accessibility-following wrapping component for a native fieldset element\", \"displayName\": \"FieldSet\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/FieldSet/FieldSet.tsx#FieldSet\"] = { docgenInfo: FieldSet.__docgenInfo, name: \"FieldSet\", path: \"src/components/FieldSet/FieldSet.tsx#FieldSet\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}