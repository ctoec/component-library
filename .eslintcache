[{"/home/melanie/Code/component-library/src/components/Table/Table.stories.jsx":"1","/home/melanie/Code/component-library/src/components/Accordion/Accordion.stories.tsx":"2","/home/melanie/Code/component-library/src/components/Alert/Alert.stories.tsx":"3","/home/melanie/Code/component-library/src/components/Button/Button.stories.tsx":"4","/home/melanie/Code/component-library/src/components/ButtonWithDropdown/ButtonWithDropdown.stories.tsx":"5","/home/melanie/Code/component-library/src/components/Card/Card.stories.tsx":"6","/home/melanie/Code/component-library/src/components/CheckboxGroup/CheckboxGroup.stories.tsx":"7","/home/melanie/Code/component-library/src/components/DateInput/DateInput.stories.tsx":"8","/home/melanie/Code/component-library/src/components/FileInput/FileInput.stories.tsx":"9","/home/melanie/Code/component-library/src/components/EditableTable/EditableTable.stories.tsx":"10","/home/melanie/Code/component-library/src/components/FieldSet/FieldSet.stories.tsx":"11","/home/melanie/Code/component-library/src/components/Form/Form.stories.tsx":"12","/home/melanie/Code/component-library/src/components/Header/Header.stories.tsx":"13","/home/melanie/Code/component-library/src/components/InlineIcon/InlineIcon.stories.tsx":"14","/home/melanie/Code/component-library/src/components/Legend/Legend.stories.tsx":"15","/home/melanie/Code/component-library/src/components/Modal/Modal.stories.tsx":"16","/home/melanie/Code/component-library/src/components/ProcessList/ProcessList.stories.tsx":"17","/home/melanie/Code/component-library/src/components/LoadingWrapper/LoadingWrapper.stories.tsx":"18","/home/melanie/Code/component-library/src/components/RadioButtonGroup/RadioButtonGroup.stories.tsx":"19","/home/melanie/Code/component-library/src/components/Select/Select.stories.tsx":"20","/home/melanie/Code/component-library/src/components/SideNav/SideNav.stories.tsx":"21","/home/melanie/Code/component-library/src/components/StepList/StepList.stories.tsx":"22","/home/melanie/Code/component-library/src/components/TabNav/TabNav.stories.tsx":"23","/home/melanie/Code/component-library/src/components/Tag/Tag.stories.tsx":"24","/home/melanie/Code/component-library/src/components/TextInput/TextInput.stories.tsx":"25","/home/melanie/Code/component-library/src/components/TextWithIcon/TextWithIcon.stories.tsx":"26","/home/melanie/Code/component-library/src/components/Table/Table.tsx":"27","/home/melanie/Code/component-library/src/components/TextWithIcon/TextWithIcon.tsx":"28","/home/melanie/Code/component-library/src/components/TabNav/TabNav.tsx":"29","/home/melanie/Code/component-library/src/components/StepList/StepList.tsx":"30","/home/melanie/Code/component-library/src/components/TextInput/TextInput.tsx":"31","/home/melanie/Code/component-library/src/components/Select/Select.tsx":"32","/home/melanie/Code/component-library/src/components/RadioButtonGroup/RadioButtonGroup.tsx":"33","/home/melanie/Code/component-library/src/components/LoadingWrapper/LoadingWrapper.tsx":"34","/home/melanie/Code/component-library/src/components/ProcessList/ProcessList.tsx":"35","/home/melanie/Code/component-library/src/components/index.ts":"36","/home/melanie/Code/component-library/src/components/Header/Header.tsx":"37","/home/melanie/Code/component-library/src/components/Modal/Modal.tsx":"38","/home/melanie/Code/component-library/src/components/EditableTable/EditableTable.tsx":"39","/home/melanie/Code/component-library/src/components/CheckboxGroup/CheckboxGroup.tsx":"40","/home/melanie/Code/component-library/src/components/Button/Button.tsx":"41","/home/melanie/Code/component-library/src/components/Card/ExpandCard.tsx":"42","/home/melanie/Code/component-library/src/components/Card/CardExpansion.tsx":"43","/home/melanie/Code/component-library/src/assets/images/index.tsx":"44","/home/melanie/Code/component-library/src/components/Table/ColumnHeader.tsx":"45","/home/melanie/Code/component-library/src/components/ButtonWithDropdown/ButtonWithDropdown.tsx":"46","/home/melanie/Code/component-library/src/components/Accordion/Accordion.tsx":"47","/home/melanie/Code/component-library/src/index.ts":"48","/home/melanie/Code/component-library/src/components/Form/index.ts":"49","/home/melanie/Code/component-library/src/components/StepList/Step.tsx":"50","/home/melanie/Code/component-library/src/components/TabNav/Tabs.tsx":"51","/home/melanie/Code/component-library/src/components/FieldSet/FieldSet.tsx":"52","/home/melanie/Code/component-library/src/components/Form/FormFieldSet.tsx":"53","/home/melanie/Code/component-library/src/components/ProcessList/ProcessStep.tsx":"54","/home/melanie/Code/component-library/src/components/Form/FormStatus/FormStatus.tsx":"55","/home/melanie/Code/component-library/src/components/RadioButton/RadioButton.tsx":"56","/home/melanie/Code/component-library/src/components/Table/Row/index.ts":"57","/home/melanie/Code/component-library/src/components/Tag/Tag.tsx":"58","/home/melanie/Code/component-library/src/components/TooltipWrapper/TooltipWrapper.tsx":"59","/home/melanie/Code/component-library/src/components/SideNav/SideNav.tsx":"60","/home/melanie/Code/component-library/src/components/Legend/Legend.tsx":"61","/home/melanie/Code/component-library/src/components/HeadingLevel.tsx":"62","/home/melanie/Code/component-library/src/components/InlineIcon/InlineIcon.tsx":"63","/home/melanie/Code/component-library/src/components/Header/NavDropdown.tsx":"64","/home/melanie/Code/component-library/src/components/EditableTable/TableIcons.tsx":"65","/home/melanie/Code/component-library/src/components/Checkbox/Checkbox.tsx":"66","/home/melanie/Code/component-library/src/components/Header/NavLink.tsx":"67","/home/melanie/Code/component-library/src/components/Table/index.ts":"68","/home/melanie/Code/component-library/src/components/Form/ObjectDriller.ts":"69","/home/melanie/Code/component-library/src/components/Accordion/AccordionItem.tsx":"70","/home/melanie/Code/component-library/src/components/TabNav/tabNavUtils.ts":"71","/home/melanie/Code/component-library/src/components/Form/FormContext.ts":"72","/home/melanie/Code/component-library/src/components/Form/FormSubmitButton.tsx":"73","/home/melanie/Code/component-library/src/components/Form/FormField.tsx":"74","/home/melanie/Code/component-library/src/components/TabNav/Tab.tsx":"75","/home/melanie/Code/component-library/src/components/Table/Row/ExpandRow.tsx":"76","/home/melanie/Code/component-library/src/components/Table/Row/Row.tsx":"77","/home/melanie/Code/component-library/src/components/Form/Form.tsx":"78","/home/melanie/Code/component-library/src/hooks/index.ts":"79","/home/melanie/Code/component-library/src/components/SideNav/SideNavItem.tsx":"80","/home/melanie/Code/component-library/src/components/Table/Row/RowExpansion.tsx":"81","/home/melanie/Code/component-library/src/hooks/useHideOnLostFocus.ts":"82","/home/melanie/Code/component-library/src/components/FileInput/FileInput.tsx":"83","/home/melanie/Code/component-library/src/components/DateInput/DateInput.tsx":"84","/home/melanie/Code/component-library/src/components/Card/Card.tsx":"85","/home/melanie/Code/component-library/src/components/Alert/Alert.tsx":"86","/home/melanie/Code/component-library/src/components/ErrorBoundary/ErrorBoundary.tsx":"87"},{"size":1435,"mtime":1605631933201,"results":"88","hashOfConfig":"89"},{"size":1502,"mtime":1608666151923,"results":"90","hashOfConfig":"89"},{"size":1231,"mtime":1605631933189,"results":"91","hashOfConfig":"89"},{"size":1124,"mtime":1605631933189,"results":"92","hashOfConfig":"89"},{"size":418,"mtime":1605631933189,"results":"93","hashOfConfig":"89"},{"size":3851,"mtime":1605631933189,"results":"94","hashOfConfig":"89"},{"size":3731,"mtime":1605631933193,"results":"95","hashOfConfig":"89"},{"size":1340,"mtime":1609181764890,"results":"96","hashOfConfig":"89"},{"size":326,"mtime":1609181764890,"results":"97","hashOfConfig":"89"},{"size":3000,"mtime":1605631933193,"results":"98","hashOfConfig":"89"},{"size":1737,"mtime":1605631933193,"results":"99","hashOfConfig":"89"},{"size":5366,"mtime":1605631933193,"results":"100","hashOfConfig":"89"},{"size":2682,"mtime":1605631933193,"results":"101","hashOfConfig":"89"},{"size":384,"mtime":1605631933197,"results":"102","hashOfConfig":"89"},{"size":409,"mtime":1605631933197,"results":"103","hashOfConfig":"89"},{"size":978,"mtime":1605631933197,"results":"104","hashOfConfig":"89"},{"size":712,"mtime":1605631933201,"results":"105","hashOfConfig":"89"},{"size":439,"mtime":1605631933197,"results":"106","hashOfConfig":"89"},{"size":4095,"mtime":1608665653735,"results":"107","hashOfConfig":"89"},{"size":3807,"mtime":1605631933201,"results":"108","hashOfConfig":"89"},{"size":1362,"mtime":1605631933201,"results":"109","hashOfConfig":"89"},{"size":1025,"mtime":1605631933201,"results":"110","hashOfConfig":"89"},{"size":6217,"mtime":1605631933201,"results":"111","hashOfConfig":"89"},{"size":365,"mtime":1605631933201,"results":"112","hashOfConfig":"89"},{"size":3710,"mtime":1605631933201,"results":"113","hashOfConfig":"89"},{"size":958,"mtime":1608756475822,"results":"114","hashOfConfig":"89"},{"size":2956,"mtime":1605631933201,"results":"115","hashOfConfig":"89"},{"size":975,"mtime":1605631933201,"results":"116","hashOfConfig":"89"},{"size":1970,"mtime":1605929402293,"results":"117","hashOfConfig":"89"},{"size":1455,"mtime":1605631933201,"results":"118","hashOfConfig":"89"},{"size":5909,"mtime":1607659505092,"results":"119","hashOfConfig":"89"},{"size":5284,"mtime":1605631933201,"results":"120","hashOfConfig":"89"},{"size":3864,"mtime":1605631933201,"results":"121","hashOfConfig":"89"},{"size":700,"mtime":1605631933197,"results":"122","hashOfConfig":"89"},{"size":484,"mtime":1605631933201,"results":"123","hashOfConfig":"89"},{"size":1481,"mtime":1608741000201,"results":"124","hashOfConfig":"89"},{"size":4659,"mtime":1605631933193,"results":"125","hashOfConfig":"89"},{"size":1660,"mtime":1605631933197,"results":"126","hashOfConfig":"89"},{"size":1333,"mtime":1605631933193,"results":"127","hashOfConfig":"89"},{"size":3818,"mtime":1605631933193,"results":"128","hashOfConfig":"89"},{"size":1807,"mtime":1605631933189,"results":"129","hashOfConfig":"89"},{"size":838,"mtime":1605631933189,"results":"130","hashOfConfig":"89"},{"size":174,"mtime":1605631933189,"results":"131","hashOfConfig":"89"},{"size":1573,"mtime":1609181911781,"results":"132","hashOfConfig":"89"},{"size":2537,"mtime":1605631933201,"results":"133","hashOfConfig":"89"},{"size":1585,"mtime":1605631933189,"results":"134","hashOfConfig":"89"},{"size":661,"mtime":1605631933189,"results":"135","hashOfConfig":"89"},{"size":157,"mtime":1609181764894,"results":"136","hashOfConfig":"89"},{"size":226,"mtime":1605631933193,"results":"137","hashOfConfig":"89"},{"size":2644,"mtime":1605631933201,"results":"138","hashOfConfig":"89"},{"size":6841,"mtime":1606148309346,"results":"139","hashOfConfig":"89"},{"size":1955,"mtime":1605631933193,"results":"140","hashOfConfig":"89"},{"size":1015,"mtime":1606157322723,"results":"141","hashOfConfig":"89"},{"size":548,"mtime":1605631933201,"results":"142","hashOfConfig":"89"},{"size":622,"mtime":1605631933193,"results":"143","hashOfConfig":"89"},{"size":1016,"mtime":1605631933201,"results":"144","hashOfConfig":"89"},{"size":52,"mtime":1605631933201,"results":"145","hashOfConfig":"89"},{"size":434,"mtime":1605631933201,"results":"146","hashOfConfig":"89"},{"size":440,"mtime":1606148309346,"results":"147","hashOfConfig":"89"},{"size":1383,"mtime":1605631933201,"results":"148","hashOfConfig":"89"},{"size":1402,"mtime":1605631933197,"results":"149","hashOfConfig":"89"},{"size":61,"mtime":1605631933193,"results":"150","hashOfConfig":"89"},{"size":1632,"mtime":1609181764890,"results":"151","hashOfConfig":"89"},{"size":1909,"mtime":1605631933193,"results":"152","hashOfConfig":"89"},{"size":2651,"mtime":1605631933193,"results":"153","hashOfConfig":"89"},{"size":1063,"mtime":1605631933193,"results":"154","hashOfConfig":"89"},{"size":1473,"mtime":1605631933193,"results":"155","hashOfConfig":"89"},{"size":80,"mtime":1605631933201,"results":"156","hashOfConfig":"89"},{"size":2239,"mtime":1605631933193,"results":"157","hashOfConfig":"89"},{"size":1924,"mtime":1605631933189,"results":"158","hashOfConfig":"89"},{"size":1034,"mtime":1605631933201,"results":"159","hashOfConfig":"89"},{"size":1876,"mtime":1607471495458,"results":"160","hashOfConfig":"89"},{"size":492,"mtime":1605631933193,"results":"161","hashOfConfig":"89"},{"size":2982,"mtime":1606157322723,"results":"162","hashOfConfig":"89"},{"size":832,"mtime":1606148309346,"results":"163","hashOfConfig":"89"},{"size":865,"mtime":1605631933201,"results":"164","hashOfConfig":"89"},{"size":1126,"mtime":1605631933201,"results":"165","hashOfConfig":"89"},{"size":1777,"mtime":1607659505092,"results":"166","hashOfConfig":"89"},{"size":38,"mtime":1605631933205,"results":"167","hashOfConfig":"89"},{"size":928,"mtime":1605631933201,"results":"168","hashOfConfig":"89"},{"size":444,"mtime":1605631933201,"results":"169","hashOfConfig":"89"},{"size":805,"mtime":1605631933205,"results":"170","hashOfConfig":"89"},{"size":1381,"mtime":1609176943024,"results":"171","hashOfConfig":"89"},{"size":5979,"mtime":1609181764890,"results":"172","hashOfConfig":"89"},{"size":3196,"mtime":1605631933189,"results":"173","hashOfConfig":"89"},{"size":914,"mtime":1605631933189,"results":"174","hashOfConfig":"89"},{"size":1154,"mtime":1605631933193,"results":"175","hashOfConfig":"89"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},"10ehm4e",{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"181"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"181"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"181"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"181"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"181"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"181"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"181"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"181"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"181"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"181"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"181"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"181"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"181"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"181"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"181"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"181"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"181"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"181"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"181"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"181"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"181"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"181"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"181"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"181"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"181"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"181"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"181"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"181"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"181"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"181"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"181"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"181"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"181"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"181"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"181"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"181"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"181"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"181"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"181"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"181"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"379"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"181"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"181"},"/home/melanie/Code/component-library/src/components/Table/Table.stories.jsx",[],["396","397","398"],"/home/melanie/Code/component-library/src/components/Accordion/Accordion.stories.tsx",[],["399","400","401"],"/home/melanie/Code/component-library/src/components/Alert/Alert.stories.tsx",["402"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Alert } from '..';\nimport { AlertProps } from '../..';\n\nconst successAlertProps: AlertProps = {\n  type: 'success',\n  heading: 'Success alert!',\n  text: 'Good job, you.',\n};\nconst warningAlertProps: AlertProps = {\n  type: 'warning',\n  heading: 'Watch out!',\n  text: 'Is that what you meant to do?',\n};\nconst errorAlertProps: AlertProps = {\n  type: 'error',\n  heading: 'Hark, an error!',\n  text: \"Something's not right.\",\n};\nconst infoAlertProps: AlertProps = {\n  type: 'info',\n  heading: 'Information',\n  text: 'Neutral information here.',\n};\nconst allAlertProps: AlertProps[] = [\n  successAlertProps,\n  warningAlertProps,\n  errorAlertProps,\n  infoAlertProps,\n];\n\nstoriesOf('Alert', module)\n  .add('Success', () => {\n    return <Alert {...successAlertProps} />;\n  })\n  .add('Warning', () => {\n    return <Alert {...warningAlertProps} />;\n  })\n  .add('Error', () => {\n    return <Alert {...errorAlertProps} />;\n  })\n  .add('Info', () => {\n    return <Alert {...infoAlertProps} />;\n  })\n  .add('Lots of alerts', () => {\n    return (\n      <>\n        {allAlertProps.map((p, i) => (\n          <Alert {...p} key={i} />\n        ))}\n      </>\n    );\n  });\n","/home/melanie/Code/component-library/src/components/Button/Button.stories.tsx",[],"/home/melanie/Code/component-library/src/components/ButtonWithDropdown/ButtonWithDropdown.stories.tsx",[],"/home/melanie/Code/component-library/src/components/Card/Card.stories.tsx",[],"/home/melanie/Code/component-library/src/components/CheckboxGroup/CheckboxGroup.stories.tsx",["403","404"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { FormStatusProps } from '..';\nimport { TextInput } from '../TextInput/TextInput';\nimport { CheckboxInGroup, CheckboxGroup } from './CheckboxGroup';\n\nconst onChange = action('onChange');\nconst options: CheckboxInGroup[] = [\n  {\n    value: 'one',\n    id: 'one',\n    text: 'One',\n    name: 'one',\n    onChange,\n  },\n  {\n    value: 'two',\n    id: 'two',\n    text: 'Two',\n    name: 'two',\n    onChange,\n  },\n];\nconst optionsWithOneExpansion: CheckboxInGroup[] = [\n  {\n    ...options[0],\n    expansion: <p>Thank you for selecting option one!</p>,\n  },\n  options[1],\n];\nconst optionsWithOneComplexExpansion: CheckboxInGroup[] = [\n  {\n    ...options[0],\n    expansion: (\n      <>\n        <p>Thank you for selecting option one!</p>\n        <TextInput\n          id=\"radio-multi-text-input\"\n          label=\"Interactive Element?\"\n          defaultValue=\"Yes, you can!\"\n          onChange={onChange}\n        />\n      </>\n    ),\n  },\n  options[1],\n];\nconst optionsWithTwoExpansions: CheckboxInGroup[] = [\n  {\n    ...options[0],\n    expansion: <p>Thank you for selecting option one!</p>,\n  },\n  {\n    ...options[1],\n    expansion: <p>Woo! #2</p>,\n  },\n];\nconst warning: FormStatusProps = {\n  type: 'warning',\n  message: 'These fields need your attention',\n  id: 'checklist-warning',\n};\nconst error: FormStatusProps = {\n  type: 'error',\n  message: 'These fields will block your progress',\n  id: 'checklis-error',\n};\nconst success: FormStatusProps = {\n  type: 'success',\n  message: 'These fields were validated woo',\n  id: 'checklist-success',\n};\n\nstoriesOf('CheckboxGroup', module)\n  .add('CheckboxGroup', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        showLegend\n        options={options}\n        id=\"storybook-CheckboxGroup\"\n      />\n    );\n  })\n  .add('CheckboxGroup with default value', () => {\n    return (\n      <CheckboxGroup\n        legend=\"RadioButtonGroup\"\n        options={options}\n        id=\"storybook-RadioButtonGroup\"\n        defaultSelectedItemsIds=\"one\"\n      />\n    );\n  })\n  .add('CheckboxGroup with success', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        options={options}\n        id=\"storybook-CheckboxGroup\"\n        status={success}\n      />\n    );\n  })\n  .add('CheckboxGroup with warning', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        options={options}\n        id=\"storybook-CheckboxGroup\"\n        status={warning}\n      />\n    );\n  })\n  .add('CheckboxGroup with error', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        options={options}\n        id=\"storybook-CheckboxGroup\"\n        status={error}\n        showLegend\n      />\n    );\n  })\n  .add('Disabled CheckboxGroup', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        options={options}\n        id=\"storybook-CheckboxGroup\"\n        disabled={true}\n      />\n    );\n  })\n  .add('CheckboxGroup with one single element expansion', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        options={optionsWithOneExpansion}\n        id=\"storybook-CheckboxGroup\"\n      />\n    );\n  })\n  .add('CheckboxGroup with one multi element expansion', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        options={optionsWithOneComplexExpansion}\n        id=\"storybook-CheckboxGroup\"\n      />\n    );\n  })\n  .add('CheckboxGroup with both single element expansion', () => {\n    return (\n      <CheckboxGroup\n        legend=\"CheckboxGroup\"\n        options={optionsWithTwoExpansions}\n        id=\"storybook-CheckboxGroup\"\n      />\n    );\n  });\n","/home/melanie/Code/component-library/src/components/DateInput/DateInput.stories.tsx",["405"],"/home/melanie/Code/component-library/src/components/FileInput/FileInput.stories.tsx",[],"/home/melanie/Code/component-library/src/components/EditableTable/EditableTable.stories.tsx",["406"],"import React, { useState } from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { EditableTable, EditableTableColumn } from './EditableTable';\n\ntype TableData = {\n  id: number;\n  name: string;\n  count: number;\n  color: 'red' | 'blue' | 'yellow';\n};\n\nconst _data: TableData[] = [\n  {\n    id: 1,\n    name: 'first thing',\n    count: 1,\n    color: 'red',\n  },\n  {\n    id: 2,\n    name: 'Second Thing',\n    count: 20,\n    color: 'blue',\n  },\n  {\n    id: 3,\n    name: 'THIRD THING',\n    count: 100,\n    color: 'yellow',\n  },\n];\n\nconst columns: EditableTableColumn<TableData>[] = [\n  {\n    title: 'Thing name',\n    field: 'name',\n  },\n  {\n    title: 'Thing count',\n    field: 'count',\n  },\n  {\n    title: 'Thing color',\n    field: 'color',\n  },\n];\n\nstoriesOf('EditableTable', module)\n  .add('EditableTable with no actions', () => {\n    return (\n      <>\n        <h2>A table you can't actually edit</h2>\n        <EditableTable<TableData>\n          title=\"EditableTable you can't actually edit\"\n          data={_data}\n          columns={columns}\n        />\n      </>\n    );\n  })\n  .add('EditableTable with selectable rows', () => {\n    return (\n      <>\n        <h2>A table with rows you can select</h2>\n        <EditableTable<TableData>\n          title=\"EditableTable with rows you can select\"\n          data={_data}\n          columns={columns}\n          selectable\n        />\n      </>\n    );\n  })\n  .add('EditableTable with update action', () =>\n    React.createElement(() => {\n      const [data, setData] = useState(_data);\n      return (\n        <>\n          <h2>A table with rows you can update</h2>\n          <EditableTable<TableData>\n            title=\"EditableTable with rows you can update\"\n            data={data}\n            columns={columns}\n            onRowUpdate={(newRow: TableData) =>\n              new Promise((resolve) => {\n                const dataUpdate = [...data];\n                const thisRowIdx = data.findIndex(\n                  (row) => row.id === newRow.id\n                );\n                dataUpdate[thisRowIdx] = newRow;\n                setData(dataUpdate);\n                resolve();\n              })\n            }\n          />\n        </>\n      );\n    })\n  )\n  .add('EditableTable with delete action', () =>\n    React.createElement(() => {\n      const [data, setData] = useState(_data);\n      return (\n        <>\n          <h2>A table with rows you can delete</h2>\n          <EditableTable<TableData>\n            title=\"EditableTable with rows you can delete\"\n            data={data}\n            columns={columns}\n            onRowDelete={(newRow: TableData) =>\n              new Promise((resolve) => {\n                const dataUpdate = [...data];\n                const thisRowIdx = data.findIndex(\n                  (row) => row.id === newRow.id\n                );\n                dataUpdate.splice(thisRowIdx, 1);\n                setData(dataUpdate);\n                resolve();\n              })\n            }\n          />\n        </>\n      );\n    })\n  );\n","/home/melanie/Code/component-library/src/components/FieldSet/FieldSet.stories.tsx",["407"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { FieldSet, FormStatusProps } from '..';\n\nconst warning: FormStatusProps = {\n  type: 'warning',\n  message: 'These fields need your attention!',\n  id: 'fieldset-warning',\n};\nconst error: FormStatusProps = {\n  type: 'error',\n  message: 'These fields will block your progress!',\n  id: 'fieldset-error',\n};\nconst success: FormStatusProps = {\n  type: 'success',\n  message: 'These fields are filled out and validated yay!',\n  id: 'fieldset-success',\n};\n\nstoriesOf('FieldSet', module).add('Default', () => {\n  return (\n    <FieldSet legend=\"field set\" id=\"default-fieldset\">\n      <p>I'm inside a field set!</p>\n    </FieldSet>\n  );\n});\nstoriesOf('FieldSet', module)\n  .add('Show legend', () => {\n    return (\n      <FieldSet legend=\"Field set\" showLegend={true} id=\"show-legend-fieldset\">\n        <p>I'm inside a field set!</p>\n      </FieldSet>\n    );\n  })\n  .add('With warning', () => {\n    return (\n      <FieldSet\n        legend=\"Warning field set\"\n        id=\"warning-fieldset\"\n        status={warning}\n      >\n        <p> Oh no! </p>\n        <p> We have warnings! </p>\n        <p> Pay attention! </p>\n      </FieldSet>\n    );\n  })\n  .add('With error', () => {\n    return (\n      <FieldSet legend=\"Error field set\" id=\"error-fieldset\" status={error}>\n        <p> Uh oh! </p>\n        <p> Bad stuff happening here! </p>\n        <p> Fix it! </p>\n      </FieldSet>\n    );\n  })\n  .add('With success', () => {\n    return (\n      <FieldSet\n        legend=\"Success field set\"\n        id=\"success-fieldset\"\n        status={success}\n      >\n        <p> Wow! </p>\n        <p> You're so smart! </p>\n        <p> What great form input! </p>\n      </FieldSet>\n    );\n  });\n","/home/melanie/Code/component-library/src/components/Form/Form.stories.tsx",["408","409","410","411","412"],"import React from 'react';\nimport moment, { Moment } from 'moment';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { Form, FormField } from '.';\nimport { TextInput, TextInputProps, CheckboxGroup } from '..';\nimport {\n  Checkbox,\n  CheckboxProps,\n  DateInput,\n  DateInputProps,\n  FormFieldSet,\n  FormFieldSetProps,\n  FormSubmitButton,\n} from '../..';\n\nconst onSubmit = action('onSubmit');\n\ntype FormDataType = {\n  firstName: string;\n  nickName?: string;\n  lastName: string;\n  turningIntoAnAnimal: boolean;\n  notBeingAfraidOfVoldemort: boolean;\n  date: Moment;\n};\n\nconst possibleSuperPowers: { [key: string]: keyof FormDataType } = {\n  ANIMAL: 'turningIntoAnAnimal',\n  VOLDEMORT: 'notBeingAfraidOfVoldemort',\n};\n\nconst _formData = {\n  firstName: 'James',\n  nickName: 'Prongs',\n  lastName: 'Potter',\n  turningIntoAnAnimal: true,\n  notBeingAfraidOfVoldemort: true,\n  date: moment(),\n};\n\nconst errorfulFormData = {\n  firstName: 'Peter',\n  nickName: 'Wormtail',\n  lastName: 'Pettigrew',\n  turningIntoAnAnimal: true,\n  notBeingAfraidOfVoldemort: false,\n};\n\nconst SampleForm = ({ formData }) => (\n  <Form onSubmit={onSubmit} data={formData}>\n    <FormFieldSet<FormDataType>\n      id=\"name-fields\"\n      legend=\"Character name\"\n      showLegend\n      status={(data) =>\n        data.firstName === 'Peter'\n          ? {\n              type: 'error',\n              id: 'character-name',\n              message: 'Error: watch out Ron!!!!!',\n            }\n          : undefined\n      }\n    >\n      <FormField<FormDataType, TextInputProps, string | null>\n        getValue={(data) => data.at('firstName')}\n        inputComponent={TextInput}\n        type=\"input\"\n        id=\"firstName\"\n        label=\"First name\"\n        status={(objectDriller) =>\n          objectDriller.at('firstName').value === errorfulFormData.firstName\n            ? {\n                type: 'error',\n                message: 'No characters named Peter allowed',\n                id: 'firstName-status',\n              }\n            : undefined\n        }\n      />\n      <FormField<FormDataType, TextInputProps, string | null>\n        getValue={(data) => data.at('lastName')}\n        inputComponent={TextInput}\n        type=\"input\"\n        id=\"lastName\"\n        label=\"Last name\"\n        status={(objectDriller) =>\n          objectDriller.at('lastName').value === errorfulFormData.lastName\n            ? {\n                type: 'success',\n                message: 'This is fine though',\n                id: 'lastName-status',\n              }\n            : undefined\n        }\n      />\n    </FormFieldSet>\n    <FormField<FormDataType, TextInputProps, string | null>\n      getValue={(data) => data.at('nickName')}\n      preprocessForDisplay={(value) => `\"${value}\"`}\n      inputComponent={TextInput}\n      type=\"input\"\n      id=\"nickName\"\n      label=\"Nick name\"\n      status={(objectDriller) =>\n        objectDriller.at('nickName').value === errorfulFormData.nickName\n          ? {\n              type: 'error',\n              message: 'Nickname is too cutesy for an evil character',\n              id: 'nickName-status',\n            }\n          : undefined\n      }\n    />\n    <CheckboxGroup<FormFieldSetProps<FormDataType>>\n      legend=\"Character superpowers\"\n      hint=\"As identified by readers\"\n      id=\"powers\"\n      useFormFieldSet\n      options={[\n        {\n          render: ({ id, selected }) => (\n            <FormField<FormDataType, CheckboxProps, string | boolean | Moment>\n              getValue={(data) => data.at(possibleSuperPowers.ANIMAL)}\n              parseOnChangeEvent={(e) => e.target.checked}\n              defaultValue={selected}\n              inputComponent={Checkbox}\n              id={id}\n              text=\"Can turn into an animal\"\n            />\n          ),\n          value: possibleSuperPowers.ANIMAL,\n        },\n        {\n          render: ({ id, selected }) => (\n            <FormField<FormDataType, CheckboxProps, string | boolean | Moment>\n              getValue={(data) => data.at(possibleSuperPowers.VOLDEMORT)}\n              parseOnChangeEvent={(e) => e.target.checked}\n              defaultValue={selected}\n              inputComponent={Checkbox}\n              id={id}\n              text=\"Is not afraid of Voldemort\"\n            />\n          ),\n          value: possibleSuperPowers.VOLDEMORT,\n        },\n      ]}\n      status={(characterData) =>\n        characterData === errorfulFormData\n          ? {\n              id: 'checkboxStatus',\n              type: 'error',\n              message: 'Nope, gotta stand up to Voldy',\n            }\n          : undefined\n      }\n    />\n    <FormField<FormDataType, DateInputProps, Moment>\n      getValue={(data) => data.at('date')}\n      parseOnChangeEvent={(e) => (e as unknown) as Moment}\n      inputComponent={DateInput}\n      id=\"date\"\n      label=\"Pick a date\"\n      status={(objectDriller) =>\n        objectDriller.at('date').value?.isValid()\n          ? undefined\n          : { id: 'dateStatus', type: 'error', message: 'Pick one' }\n      }\n    />\n    <FormSubmitButton />\n  </Form>\n);\n\nstoriesOf('Form components', module)\n  .addDecorator(withKnobs)\n  .add('Form', () => {\n    return <SampleForm formData={_formData} />;\n  })\n  .add('Form with errors', () => {\n    return <SampleForm formData={errorfulFormData} />;\n  });\n","/home/melanie/Code/component-library/src/components/Header/Header.stories.tsx",["413","414"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { withKnobs, text, object } from '@storybook/addon-knobs';\nimport { Header } from './Header';\nimport { NavLinkProps } from './NavLink';\nimport { NavDropdownProps } from './NavDropdown';\n\nconst defaultTitle = 'Hello world!';\nconst defaultName = 'Chris';\nconst defaultNavLinks: NavLinkProps[] = [\n  { type: 'primary', text: 'Active section', path: '/' },\n  {\n    type: 'primary',\n    text: 'Googlywebs',\n    path: 'https://google.com',\n    external: true,\n    target: '_blank',\n  },\n  {\n    type: 'primary',\n    text: 'Attention needed',\n    attentionNeeded: true,\n    path: '/attention',\n  },\n  { type: 'secondary', text: 'Secondary item', path: '/secondary' },\n  { type: 'secondary', text: 'Another secondary item', path: '/secondary2' },\n];\nconst navDropdowns: NavDropdownProps[] = [\n  {\n    id: 'test2',\n    text: 'Attention needed',\n    type: 'secondary',\n    children: [{ text: 'Child two', path: '/' }],\n  },\n  {\n    id: 'test4',\n    text: 'Secondary item',\n    type: 'secondary',\n    children: [{ text: 'Child one', path: '/child-one' }],\n  },\n];\n\nstoriesOf('Header', module)\n  .addDecorator(withKnobs)\n  .add('Logged in', () => {\n    const customTitle = text('Title', defaultTitle);\n    const customName = text('Name', defaultName);\n    const customNavLinks = object('Items', defaultNavLinks);\n    return (\n      <Header\n        primaryTitle={customTitle}\n        navItems={customNavLinks}\n        loginPath=\"/login\"\n        logoutPath=\"/logout\"\n        userFirstName={customName}\n      />\n    );\n  })\n  .add('Logged out', () => {\n    const customTitle = text('Title', defaultTitle);\n    const customNavLinks = object('Items', defaultNavLinks);\n    return (\n      <Header\n        primaryTitle={customTitle}\n        navItems={customNavLinks}\n        loginPath=\"/login\"\n        logoutPath=\"/logout\"\n      />\n    );\n  })\n  .add('Dropdown', () => {\n    const customTitle = text('Title', defaultTitle);\n    const customNavLinks = object('Items', [\n      ...defaultNavLinks,\n      ...navDropdowns,\n    ]);\n    return (\n      <Header\n        primaryTitle={customTitle}\n        navItems={customNavLinks}\n        loginPath=\"/login\"\n        logoutPath=\"/logout\"\n      />\n    );\n  })\n  .add('Dropdown with secondary buttons only', () => {\n    const customTitle = text('Title', defaultTitle);\n    const customNavLinks = object('Items', [\n      ...defaultNavLinks,\n      ...navDropdowns,\n    ]).filter((d) => d.type === 'secondary');\n    return (\n      <Header\n        primaryTitle={customTitle}\n        navItems={customNavLinks}\n        loginPath=\"/login\"\n        logoutPath=\"/logout\"\n      />\n    );\n  });\n","/home/melanie/Code/component-library/src/components/InlineIcon/InlineIcon.stories.tsx",[],"/home/melanie/Code/component-library/src/components/Legend/Legend.stories.tsx",[],"/home/melanie/Code/component-library/src/components/Modal/Modal.stories.tsx",[],"/home/melanie/Code/component-library/src/components/ProcessList/ProcessList.stories.tsx",[],"/home/melanie/Code/component-library/src/components/LoadingWrapper/LoadingWrapper.stories.tsx",[],"/home/melanie/Code/component-library/src/components/RadioButtonGroup/RadioButtonGroup.stories.tsx",["415","416"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { FormStatusProps } from '..';\nimport { TextInput } from '../TextInput/TextInput';\nimport { RadioButtonGroup, RadioOption } from './RadioButtonGroup';\nimport '../../assets/styles/index.scss';\n\nconst onChange = action('onChange');\nconst options: RadioOption[] = [\n  {\n    value: 'one',\n    id: 'one',\n    text: 'One',\n    onChange,\n  },\n  {\n    value: 'two',\n    id: 'two',\n    text: 'Two',\n    onChange,\n  },\n];\nconst optionsWithOneExpansion: RadioOption[] = [\n  {\n    ...options[0],\n    expansion: <p>Thank you for selecting option one!</p>,\n  },\n  options[1],\n];\nconst optionsWithOneComplexExpansion: RadioOption[] = [\n  {\n    ...options[0],\n    expansion: (\n      <>\n        <p>Thank you for selecting option one!</p>\n        <TextInput\n          id=\"radio-multi-text-input\"\n          label=\"Interactive Element?\"\n          defaultValue=\"Yes, you can!\"\n          onChange={onChange}\n        />\n      </>\n    ),\n  },\n  options[1],\n];\nconst optionsWithTwoExpansions: RadioOption[] = [\n  {\n    ...options[0],\n    expansion: <p>Thank you for selecting option one!</p>,\n  },\n  {\n    ...options[1],\n    expansion: <p>Woo! #2</p>,\n  },\n];\nconst warning: FormStatusProps = {\n  type: 'warning',\n  message: 'These fields need your attention',\n  id: 'checklist-warning',\n};\nconst error: FormStatusProps = {\n  type: 'error',\n  message: 'These fields will block your progress',\n  id: 'checklis-error',\n};\nconst success: FormStatusProps = {\n  type: 'success',\n  message: 'These fields were validated woo',\n  id: 'checklist-success',\n};\n\nstoriesOf('RadioButtonGroup', module)\n  .add('RadioButtonGroup', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={options}\n        id=\"storybook-RadioButtonGroup\"\n      />\n    );\n  })\n  .add('RadioButtonGroup with default value', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={options}\n        id=\"storybook-RadioButtonGroup\"\n        defaultSelectedItemId=\"one\"\n      />\n    );\n  })\n  .add('RadioButtonGroup with success', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={options}\n        id=\"storybook-RadioButtonGroup\"\n        status={success}\n      />\n    );\n  })\n  .add('RadioButtonGroup with warning', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={options}\n        id=\"storybook-RadioButtonGroup\"\n        status={warning}\n      />\n    );\n  })\n  .add('RadioButtonGroup with error', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={options}\n        id=\"storybook-RadioButtonGroup\"\n        status={error}\n      />\n    );\n  })\n  .add('Disabled RadioButtonGroup', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={options}\n        id=\"storybook-RadioButtonGroup\"\n        disabled={true}\n      />\n    );\n  })\n  .add('RadioButtonGroup with one single element expansion', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={optionsWithOneExpansion}\n        id=\"storybook-RadioButtonGroup\"\n      />\n    );\n  })\n  .add('RadioButtonGroup with one multi element expansion', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={optionsWithOneComplexExpansion}\n        id=\"storybook-RadioButtonGroup\"\n      />\n    );\n  })\n  .add('RadioButtonGroup with both single element expansion', () => {\n    return (\n      <RadioButtonGroup\n        inputName=\"example-group\"\n        legend=\"RadioButtonGroup\"\n        options={optionsWithTwoExpansions}\n        id=\"storybook-RadioButtonGroup\"\n      />\n    );\n  });\n","/home/melanie/Code/component-library/src/components/Select/Select.stories.tsx",["417"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { FormStatusProps } from '..';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Select, SelectWithOther } from './Select';\n\nconst onChange = action('onChange');\nconst options = [\n  {\n    text: 'Option one',\n    value: 'one',\n  },\n  {\n    text: 'Option two',\n    value: 'two',\n  },\n];\nconst optionsWithOneExpansion = [\n  {\n    text: 'Option one',\n    value: 'one',\n    expansion: <p>Thank you for selecting option one!</p>,\n  },\n  {\n    text: 'Option two',\n    value: 'two',\n  },\n];\nconst optionsWithOneComplexExpansion = [\n  {\n    text: 'Option one',\n    value: 'one',\n    expansion: (\n      <>\n        <p>Thank you for selecting option one!</p>\n        <TextInput\n          id=\"radio-multi-text-input\"\n          label=\"Interactive Element?\"\n          defaultValue=\"Yes, you can!\"\n          onChange={onChange}\n        />\n      </>\n    ),\n  },\n  {\n    text: 'Option two',\n    value: 'two',\n  },\n];\nconst optionsWithTwoExpansions = [\n  {\n    text: 'Option one',\n    value: 'one',\n    expansion: <p>Thank you for selecting option one!</p>,\n  },\n  {\n    text: 'Option two',\n    value: 'two',\n    expansion: <p>Woo! #2</p>,\n  },\n];\nconst warning: FormStatusProps = {\n  type: 'warning',\n  message: 'These fields need your attention',\n  id: 'checklist-warning',\n};\nconst error: FormStatusProps = {\n  type: 'error',\n  message: 'These fields will block your progress',\n  id: 'checklis-error',\n};\nconst success: FormStatusProps = {\n  type: 'success',\n  message: 'These fields were validated woo',\n  id: 'checklist-success',\n};\n\nstoriesOf('Select', module)\n  .add('Select', () => {\n    return (\n      <Select\n        label={<span>Span label</span>}\n        onChange={onChange}\n        options={options}\n        id=\"storybook-select\"\n      />\n    );\n  })\n  .add('Select with success', () => {\n    return (\n      <Select\n        label=\"Select\"\n        onChange={onChange}\n        options={options}\n        id=\"storybook-select\"\n        status={success}\n      />\n    );\n  })\n  .add('Select with warning', () => {\n    return (\n      <Select\n        label=\"Select\"\n        onChange={onChange}\n        options={options}\n        id=\"storybook-select\"\n        status={warning}\n      />\n    );\n  })\n  .add('Select with error', () => {\n    return (\n      <Select\n        label=\"Select\"\n        onChange={onChange}\n        options={options}\n        id=\"storybook-select\"\n        status={error}\n      />\n    );\n  })\n  .add('Select with other', () => {\n    return (\n      <SelectWithOther\n        legend=\"Select with other\"\n        otherInputOnChange={onChange}\n        otherOptionDisplay={'Other'}\n        labelForSelect=\"Select\"\n        onChange={onChange}\n        options={options}\n        id=\"storybook-select\"\n        otherInputLabel=\"Other choice\"\n      />\n    );\n  })\n  .add('Disabled select', () => {\n    return (\n      <Select\n        label=\"Select\"\n        onChange={onChange}\n        options={options}\n        id=\"storybook-select\"\n        disabled={true}\n      />\n    );\n  })\n  .add('Select with one single element expansion', () => {\n    return (\n      <Select\n        label=\"Select\"\n        onChange={onChange}\n        options={optionsWithOneExpansion}\n        id=\"storybook-select\"\n      />\n    );\n  })\n  .add('Select with one multi element expansion', () => {\n    return (\n      <Select\n        label=\"Select\"\n        onChange={onChange}\n        options={optionsWithOneComplexExpansion}\n        id=\"storybook-select\"\n      />\n    );\n  })\n  .add('Select with both single element expansion', () => {\n    return (\n      <Select\n        label=\"Select\"\n        onChange={onChange}\n        options={optionsWithTwoExpansions}\n        id=\"storybook-select\"\n      />\n    );\n  });\n","/home/melanie/Code/component-library/src/components/SideNav/SideNav.stories.tsx",["418"],"import React, { useState } from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport { SideNav, Button } from '..';\nimport { action } from '@storybook/addon-actions';\nimport { SideNavItemProps } from './SideNavItem';\n\nconst onClick = action('onChange');\nconst exampleItems: SideNavItemProps[] = [\n  {\n    id: 'one',\n    title: 'The default active item',\n    onClick,\n    description: 'This is the first item',\n    content: <div>Some content for the first item</div>,\n  },\n  {\n    id: 'two',\n    title: 'The other item',\n    onClick,\n    icon: 'complete',\n    description: 'This is the third item',\n    content: (\n      <div>\n        <Button text=\"A Button\" />\n      </div>\n    ),\n  },\n];\n\nstoriesOf('SideNav', module)\n  .add('Default', () => {\n    return <SideNav items={exampleItems} />;\n  })\n  .add('With dynamic context always', () => (\n    <SideNav items={exampleItems}>\n      <p>\n        This is rendered regardless of the content defined along with the items\n      </p>\n    </SideNav>\n  ))\n  .add('With dynamic content for no-active-item state', () =>\n    React.createElement(() => {\n      const [activeId] = useState<string>(undefined);\n      return (\n        <SideNav items={exampleItems}>\n          {activeId === undefined && (\n            <p>This is only rendered if no item is active</p>\n          )}\n        </SideNav>\n      );\n    })\n  );\n","/home/melanie/Code/component-library/src/components/StepList/StepList.stories.tsx",["419"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport { StepList, StepListProps } from './StepList';\nimport { Button } from '..';\n\nconst props: StepListProps<any> = {\n  steps: [\n    {\n      key: '1',\n      name: 'One small step',\n      status: () => 'complete',\n      editPath: '1',\n      Summary: () => <p>For a man.</p>,\n      Form: () => <></>,\n    },\n    {\n      key: '2',\n      name: 'One giant leap',\n      status: () => 'complete',\n      EditComponent: () => <Button text=\"edit component\" />,\n      Summary: () => <></>,\n      Form: () => <p>For mankind.</p>,\n    },\n    {\n      key: '3',\n      name: 'To infinity and beyond',\n      status: () => 'complete',\n      editPath: '3',\n      Summary: () => <></>,\n      Form: () => <></>,\n    },\n    {\n      key: '4',\n      name: 'Without a summary',\n      status: () => 'complete',\n      Form: () => <></>,\n    },\n  ],\n  props: {},\n  activeStep: '3',\n};\n\nstoriesOf('StepList', module).add('Default', () => {\n  return <StepList {...props} />;\n});\n","/home/melanie/Code/component-library/src/components/TabNav/TabNav.stories.tsx",["420"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { TabItem, TabNav } from './TabNav';\nimport { TextWithIcon } from '../TextWithIcon/TextWithIcon';\nimport { Error } from '../../assets/images';\n\n// Thanks to http://www.christinachern.com/hpipsum/\nconst tabNavItems: TabItem[] = [\n  {\n    id: 'one',\n    tabText: 'Section one',\n    content: (\n      <p>\n        Squashy armchairs dirt on your nose brass scales crush the Sopophorous\n        bean with flat side of silver dagger, releases juice better than\n        cutting. Full moon Whomping Willow three turns should do it lemon drops.\n        Locomotor trunks owl treats that will be 50 points, Mr. Potter. Witch\n        Weekly, he will rise again and he will come for us, headmaster Erumpent\n        horn. Fenrir Grayback horseless carriages ‘zis is a chance many would\n        die for!\n      </p>\n    ),\n  },\n  {\n    id: 'two',\n    tabText: 'Section two',\n    content: (\n      <p>\n        Prefect’s bathroom Trelawney veela squashy armchairs, SPEW: Gamp’s\n        Elemental Law of Transfiguration. Magic Nagini bezoar, Hippogriffs\n        Headless Hunt giant squid petrified. Beuxbatons flying half-blood\n        revision schedule, Great Hall aurors Minerva McGonagall Polyjuice\n        Potion. Restricted section the Burrow Wronski Feint gnomes, quidditch\n        robes detention, chocolate frogs. Errol parchment knickerbocker glory\n        Avada Kedavra Shell Cottage beaded bag portrait vulture-hat. Twin cores,\n        Aragog crimson gargoyles, Room of Requirement counter-clockwise\n        Shrieking Shack. Snivellus second floor bathrooms vanishing cabinet\n        Wizard Chess, are you a witch or not?\n      </p>\n    ),\n  },\n  {\n    id: 'three',\n    tabText: 'Section three',\n    tabTextFormatter: (text) => (\n      <TextWithIcon Icon={Error} text={text} iconSide=\"right\" />\n    ),\n    content: (\n      <p>\n        Half-giant jinxes peg-leg gillywater broken glasses large black dog\n        Great Hall. Nearly-Headless Nick now string them together, and answer me\n        this, which creature would you be unwilling to kiss? Poltergeist\n        sticking charm, troll umbrella stand flying cars golden locket Lily\n        Potter. Pumpkin juice Trevor wave your wand out glass orbs, a Grim\n        knitted hats. Stan Shunpike doe patronus, suck his soul Muggle-Born\n        large order of drills the trace. Bred in captivity fell through the\n        veil, quaffle blue flame ickle diddykins Aragog. Yer a wizard, Harry\n        Doxycide the woes of Mrs. Weasley Goblet of Fire.\n      </p>\n    ),\n  },\n  {\n    id: 'four',\n    tabText:\n      'Section with a really really really really really really long name',\n    content: <p>Blah</p>,\n    tabTextFormatter: (text) =>\n      text.length > 20 ? `${text.slice(0, 19)}...` : text,\n  },\n  {\n    id: 'five',\n    tabText: 'Section five',\n    content: <p>Blah</p>,\n  },\n  {\n    id: 'six',\n    tabText: 'Section six',\n    content: <p>Blah</p>,\n  },\n  {\n    id: 'seven',\n    tabText: 'Section seven',\n    content: <p>Blah</p>,\n  },\n  {\n    id: 'eight',\n    tabText: 'Section eight',\n    content: <p>Blah</p>,\n  },\n  {\n    id: 'nine',\n    tabText: 'Section nine',\n    content: <p>Blah</p>,\n  },\n  {\n    id: 'ten',\n    tabText: 'Section ten',\n    content: <p>Blah</p>,\n  },\n  {\n    id: 'eleven',\n    tabText: 'Section eleven',\n    content: <p>Blah</p>,\n  },\n];\n\nconst withChildren = {\n  itemType: 'organization',\n  activeId: '3',\n  items: [\n    {\n      id: 'all-orgs',\n      tabText: 'All organizations',\n      firstItem: true,\n      nestedItemType: 'site',\n      nestedTabs: [\n        { id: 'all', tabText: 'All sites', firstItem: true },\n        { id: '1', tabText: 'Hufflepuff Childcare' },\n        { id: '2', tabText: 'Gryfinndor Childcare' },\n        { id: '3', tabText: 'Slytherin Childcare' },\n        {\n          id: '4',\n          tabText: \"Rowena Ravenclaw's Roost for Rambunctious Rascals\",\n        },\n        { id: '5', tabText: 'Delacoeur Day Care' },\n        { id: '6', tabText: 'Future Quidditch Prodigy Academy' },\n      ],\n    },\n    {\n      id: '1',\n      tabText: 'Académie de Magie Beauxbâtons',\n      nestedItemType: 'site',\n      nestedTabs: [\n        { id: 'all', tabText: 'All sites', firstItem: true },\n        { id: '5', tabText: 'Delacoeur Day Care' },\n      ],\n    },\n    {\n      id: '2',\n      tabText: 'Hogwarts Childcare',\n      nestedItemType: 'site',\n      nestedTabs: [\n        { id: 'all', tabText: 'All sites', firstItem: true },\n        { id: '1', tabText: 'Hufflepuff Childcare' },\n        { id: '2', tabText: 'Gryfinndor Childcare' },\n        { id: '3', tabText: 'Slytherin Childcare' },\n        {\n          id: '4',\n          tabText: \"Rowena Ravenclaw's Roost for Rambunctious Rascals\",\n        },\n      ],\n    },\n    {\n      id: '3',\n      tabText: 'Durmstrang',\n      nestedItemType: 'site',\n      nestedTabs: [\n        { id: 'all', tabText: 'All sites', firstItem: true },\n        { id: '6', tabText: 'Future Quidditch Prodigy Academy' },\n      ],\n    },\n  ],\n};\n\nstoriesOf('Tab nav', module)\n  .add('With only a few tabs', () => {\n    return <TabNav items={tabNavItems.slice(0, 3)}></TabNav>;\n  })\n  .add('With lots of tabs', () => {\n    return <TabNav items={tabNavItems}></TabNav>;\n  })\n  .add('With one item that always stays at the beginning', () => {\n    return (\n      <TabNav\n        items={[\n          {\n            id: 'special-snowflake',\n            tabText: 'Special tab',\n            content: (\n              <p>\n                I am always the first tab! Unless there are multiple first tabs,\n                then we all stay at the front\n              </p>\n            ),\n            firstItem: true,\n          },\n          ...tabNavItems,\n        ]}\n      ></TabNav>\n    );\n  })\n  .add('With nested tab content', () => {\n    let items = [...tabNavItems];\n    items[0] = { ...items[0], nestedTabs: tabNavItems };\n    return <TabNav items={items}></TabNav>;\n  })\n  .add('With nested tab and children', () => {\n    return (\n      <TabNav {...withChildren}>\n        <p>\n          You might put dynamic content in here that is controlled by the\n          onclick behavior of the tab nav\n        </p>\n      </TabNav>\n    );\n  });\n","/home/melanie/Code/component-library/src/components/Tag/Tag.stories.tsx",[],"/home/melanie/Code/component-library/src/components/TextInput/TextInput.stories.tsx",["421"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { TextInput, FieldSet, FormStatusProps } from '..';\n\nconst onChange = action('onChange');\nconst warning: FormStatusProps = {\n  type: 'warning',\n  message: 'Warning!',\n  id: 'text-input-warning',\n};\nconst error: FormStatusProps = {\n  type: 'error',\n  message: 'Error!',\n  id: 'text-input-error',\n};\nconst success: FormStatusProps = {\n  type: 'success',\n  message: 'Success!',\n  id: 'text-input-success',\n};\n\nstoriesOf('TextInput', module)\n  .add('Default', () => {\n    return (\n      <TextInput\n        type=\"input\"\n        id=\"id\"\n        label=\"Default text input\"\n        onChange={onChange}\n      />\n    );\n  })\n  .add('With default value', () => {\n    return (\n      <TextInput\n        type=\"input\"\n        id=\"id1\"\n        label=\"Default text input\"\n        onChange={onChange}\n        defaultValue=\"default text\"\n      />\n    );\n  })\n  .add('Optional', () => {\n    return (\n      <TextInput\n        type=\"input\"\n        id=\"id2\"\n        label=\"Default optional text input\"\n        onChange={onChange}\n        optional\n      />\n    );\n  })\n  .add('Disabled', () => {\n    return (\n      <TextInput\n        type=\"input\"\n        id=\"id3\"\n        label=\"Default text input\"\n        onChange={onChange}\n        disabled\n      />\n    );\n  })\n  .add('Success', () => {\n    return (\n      <TextInput\n        type=\"input\"\n        id=\"id4\"\n        label=\"Default text input\"\n        onChange={onChange}\n        status={success}\n      />\n    );\n  })\n  .add('Warning', () => {\n    return (\n      <TextInput\n        type=\"input\"\n        id=\"id5\"\n        label=\"Default text input\"\n        onChange={onChange}\n        status={warning}\n      />\n    );\n  })\n  .add('Warning inside warning Fieldset', () => {\n    return (\n      <div className=\"usa-form\">\n        <FieldSet\n          legend=\"Text inputs\"\n          status={warning}\n          className=\"display-inline-block\"\n          id=\"example-fieldset-warning\"\n          childrenGroupClassName=\"grid-row grid-gap\"\n        >\n          <div className=\"mobile-lg:grid-col-4 display-inline-block\">\n            <TextInput\n              type=\"input\"\n              id=\"id6\"\n              label=\"Short\"\n              onChange={onChange}\n              status={warning}\n            />\n          </div>\n          <div className=\"mobile-lg:grid-col-8 display-inline-block\">\n            <TextInput\n              type=\"input\"\n              id=\"id7\"\n              label=\"Long\"\n              onChange={onChange}\n              status={warning}\n            />\n          </div>\n        </FieldSet>\n      </div>\n    );\n  })\n  .add('Error', () => {\n    return (\n      <TextInput\n        type=\"input\"\n        id=\"id8\"\n        label=\"Default text input\"\n        onChange={onChange}\n        status={error}\n      />\n    );\n  })\n  .add('Error inside error Fieldset', () => {\n    return (\n      <div className=\"usa-form\">\n        <FieldSet\n          legend=\"Text inputs\"\n          status={error}\n          className=\"display-inline-block\"\n          id=\"example-fieldset-error\"\n        >\n          <div className=\"mobile-lg:grid-col-4 display-inline-block\">\n            <TextInput\n              type=\"input\"\n              id=\"id9\"\n              label=\"Short\"\n              onChange={onChange}\n              status={error}\n            />\n          </div>\n          <div className=\"mobile-lg:grid-col-8 display-inline-block\">\n            <TextInput\n              type=\"input\"\n              id=\"id10\"\n              label=\"Long\"\n              onChange={onChange}\n              status={error}\n            />\n          </div>\n        </FieldSet>\n      </div>\n    );\n  });\n","/home/melanie/Code/component-library/src/components/TextWithIcon/TextWithIcon.stories.tsx",[],"/home/melanie/Code/component-library/src/components/Table/Table.tsx",[],"/home/melanie/Code/component-library/src/components/TextWithIcon/TextWithIcon.tsx",[],"/home/melanie/Code/component-library/src/components/TabNav/TabNav.tsx",[],"/home/melanie/Code/component-library/src/components/StepList/StepList.tsx",["422","423","424","425"],"import React from 'react';\nimport { Step, InternalStepProps, InternalStepStatus, StepProps } from './Step';\nimport cx from 'classnames';\nimport { HeadingLevel } from '../HeadingLevel';\n\nexport type StepListProps<T> = {\n  steps: StepProps<T>[];\n  props: T;\n  activeStep: string;\n  type?: 'normal' | 'embedded';\n  // https://dev.to/s_aitchison/psa-stop-hard-coding-heading-levels-in-your-react-components-2ekp\n  headerLevel?: HeadingLevel;\n};\n\nconst mapStepsToInternalProps = function <T>(\n  steps: StepProps<T>[],\n  activeStep: string,\n  props: T\n) {\n  let activeStepReached = false;\n\n  return steps.map((externalStep) => {\n    let status: InternalStepStatus;\n\n    if (activeStepReached) {\n      status = 'notStarted';\n    } else if (externalStep.key === activeStep) {\n      status = 'active';\n      activeStepReached = true;\n    } else {\n      status = externalStep.status(props);\n    }\n    const step: InternalStepProps<T> = {\n      headerLevel: 'h2',\n      ...externalStep,\n      props,\n      status,\n    };\n\n    return step;\n  });\n};\n\nexport function StepList<T>({\n  steps,\n  props,\n  activeStep,\n  type = 'normal',\n  headerLevel = 'h2',\n}: StepListProps<T>) {\n  const internalSteps = mapStepsToInternalProps(steps, activeStep, props);\n  return (\n    <ol className={cx('oec-step-list', { embedded: type === 'embedded' })}>\n      {internalSteps.map((step) => (\n        <Step {...step} type={type} headerLevel={headerLevel} />\n      ))}\n    </ol>\n  );\n}\n","/home/melanie/Code/component-library/src/components/TextInput/TextInput.tsx",["426"],"import React, { useState } from 'react';\nimport cx from 'classnames';\nimport { FormStatus, FormStatusProps } from '..';\n\nexport type TextInputProps =\n  | TextInputHTMLInputElementProps\n  | TextInlineInputHTMLInputElementProps\n  | TextInputHTMLTextAreaElementProps;\n\ntype InternalTextInputProps = {\n  name?: string;\n  label: string | JSX.Element;\n  id: string;\n  // If you want a controlled component, pass it the value\n  // Otherwise just pass a defaultValue or nothing\n  value?: string | number;\n  defaultValue?: string | number;\n  disabled?: boolean;\n  status?: FormStatusProps;\n  small?: boolean;\n  optional?: boolean;\n  hideOptionalText?: boolean;\n  // You might want to hide the text if it's in a fieldset that is optional, like in the date input component\n  srOnlyLabel?: boolean;\n  className?: string;\n  inline?: boolean;\n  beforeContent?: string | JSX.Element;\n  afterContent?: string | JSX.Element;\n};\n\nexport type TextInputHTMLInputElementProps = InternalTextInputProps & {\n  type?: 'input';\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => any;\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => any;\n  inputProps?: React.HTMLProps<HTMLInputElement>;\n};\n\nexport type TextInlineInputHTMLInputElementProps = InternalTextInputProps & {\n  type: 'inline-input';\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => any;\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => any;\n  inputProps?: React.HTMLProps<HTMLInputElement>;\n};\n\nexport type TextInputHTMLTextAreaElementProps = InternalTextInputProps & {\n  type: 'textarea';\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => any;\n  onBlur?: (event: React.FocusEvent<HTMLTextAreaElement>) => any;\n  inputProps?: React.HTMLProps<HTMLTextAreaElement> & { inputMode: 'text' } & {\n    type: 'textarea';\n  };\n};\n\nexport function TextInput({\n  type = 'input',\n  name,\n  label,\n  onChange: inputOnChange,\n  onBlur,\n  id,\n  value,\n  defaultValue,\n  disabled,\n  status,\n  small,\n  optional,\n  hideOptionalText,\n  srOnlyLabel,\n  className,\n  inputProps,\n  inline,\n  beforeContent,\n  afterContent,\n}:\n  | TextInputHTMLInputElementProps\n  | TextInlineInputHTMLInputElementProps\n  | TextInputHTMLTextAreaElementProps) {\n  const [_value, updateValue] = useState(defaultValue);\n  const onChange = (e: any) => {\n    inputOnChange(e);\n    if (!value) {\n      // If there isn't an input value, then this component should manage its own value\n      updateValue(e.target.value);\n    }\n  };\n\n  const commonProps = {\n    id,\n    name,\n    disabled,\n    defaultValue,\n    // Use the value if one is passed in; otherwise this manages its own state\n    value: value || _value || '',\n    'aria-describedby': status ? status.id : undefined,\n    'aria-invalid': status && status.type === 'error',\n    // Using aria-required to avoid default Chrome behavior\n    'aria-required': !optional,\n  };\n\n  let inputElement;\n  switch (type) {\n    case 'textarea':\n      inputElement = (\n        <textarea\n          className={cx('usa-textarea')}\n          onChange={\n            onChange as (_: React.ChangeEvent<HTMLTextAreaElement>) => any\n          }\n          onBlur={onBlur as (_: React.FocusEvent<HTMLTextAreaElement>) => any}\n          aria-describedby={status ? status.id : undefined}\n          aria-invalid={status && status.type === 'error'}\n          {...commonProps}\n          {...(inputProps as React.HTMLProps<HTMLTextAreaElement>)}\n        />\n      );\n      break;\n    case 'inline-input':\n      // For when the input needs additional context in addition to its label\n      // i.e. \"[input box] number of children\"\n      inputElement = (\n        <>\n          {beforeContent && (\n            <span className=\"display-inline-flex padding-right-1\">\n              {beforeContent}\n            </span>\n          )}\n          <input\n            className={cx(\n              'usa-input',\n              'display-inline-flex',\n              {\n                [`usa-input--${status && status.type}`]: status,\n              },\n              {\n                'usa-input--small': small,\n              },\n              {\n                'usa-input--inline': inline,\n              }\n            )}\n            type=\"text\"\n            onChange={\n              onChange as (_: React.ChangeEvent<HTMLInputElement>) => any\n            }\n            onBlur={onChange as (_: React.ChangeEvent<HTMLInputElement>) => any}\n            {...commonProps}\n            {...(inputProps as React.HTMLProps<HTMLInputElement>)}\n          />\n          {afterContent && (\n            <span className=\"display-inline-flex padding-left-1\">\n              {afterContent}\n            </span>\n          )}\n        </>\n      );\n      break;\n    case 'input':\n    default:\n      inputElement = (\n        <input\n          className={cx(\n            'usa-input',\n            {\n              [`usa-input--${status && status.type}`]: status,\n            },\n            {\n              'usa-input--small': small,\n            },\n            {\n              'usa-input--inline': inline,\n            }\n          )}\n          type=\"text\"\n          onChange={onChange as (_: React.ChangeEvent<HTMLInputElement>) => any}\n          onBlur={onBlur as (_: React.FocusEvent<HTMLInputElement>) => any}\n          {...commonProps}\n          {...(inputProps as React.HTMLProps<HTMLInputElement>)}\n        />\n      );\n  }\n\n  return (\n    <div\n      className={`${className || ''} usa-form-group${\n        status ? ` usa-form-group--${status.type}` : ''\n      }`}\n    >\n      <label\n        className={cx('usa-label', status ? `usa-label--${status.type}` : '', {\n          'usa-sr-only': srOnlyLabel,\n        })}\n        htmlFor={id}\n      >\n        {label}{' '}\n        {optional && !hideOptionalText && (\n          <span className=\"usa-hint\">&nbsp;(optional)</span>\n        )}\n      </label>\n      {status && status.message && <FormStatus {...status} />}\n      {inputElement}\n    </div>\n  );\n}\n","/home/melanie/Code/component-library/src/components/Select/Select.tsx",["427","428","429","430"],"import React, { useState, HTMLAttributes } from 'react';\nimport { FormStatus, FormStatusProps } from '../Form/FormStatus/FormStatus';\nimport { FieldSet, FieldSetProps } from '../FieldSet/FieldSet';\nimport cx from 'classnames';\nimport { FormFieldSetProps, FormFieldSet } from '../Form';\n\nexport type SelectOption = {\n  text: string;\n  value: string;\n  expansion?: React.ReactNode;\n};\n\nexport type SelectProps = {\n  id: string;\n  label: string | React.ReactNode;\n  hint?: string;\n  name?: string;\n  defaultValue?: string;\n  options: SelectOption[];\n  optional?: boolean;\n  unselectedText?: string;\n  disabled?: boolean;\n  onChange: React.ChangeEventHandler<HTMLSelectElement>;\n  status?: FormStatusProps;\n} & Omit<HTMLAttributes<HTMLSelectElement>, 'defaultValue' | 'onChange'>;\n\n/**\n * Component that wraps a native select element.\n * It also provides for expansion support by showing the expansion below the entire\n * select element.\n */\nexport const Select: React.FC<SelectProps> = ({\n  id,\n  className,\n  label,\n  hint,\n  name,\n  defaultValue = '',\n  optional,\n  disabled,\n  onChange,\n  options,\n  status,\n  unselectedText = '- Select -',\n  ...props\n}) => {\n  const [selectedItem, setSelectedItem] = useState(defaultValue);\n\n  // Wrap the supplied onChange to provide for local state management\n  const _onChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const changedValue = event.target.value;\n    setSelectedItem(changedValue);\n    onChange(event);\n  };\n\n  return (\n    <div\n      className={cx(\n        'usa-form-group',\n        {\n          [`usa-form-group--${status && status.type}`]: status,\n        },\n        className\n      )}\n      key={`${id}-form-group`}\n    >\n      <label\n        className={cx('usa-label', {\n          [`usa-label--${status && status.type}`]: status,\n        })}\n        htmlFor={id}\n      >\n        {label}\n      </label>\n      {/* TODO: hint needs to be programmatically associated */}\n      {hint && <span className=\"usa-hint text-italic\">{hint}</span>}\n      {status && status.message && <FormStatus {...status} />}\n      <select\n        id={id}\n        key={`${id}-select`}\n        className={`usa-select${status ? ` usa-input--${status.type}` : ''}`}\n        name={name || ''}\n        onChange={_onChange}\n        value={selectedItem}\n        disabled={disabled}\n        // Using aria-required to avoid default Chrome behavior\n        aria-required={!optional}\n        aria-describedby={status ? status.id : undefined}\n        aria-invalid={status && status.type === 'error'}\n        {...props}\n      >\n        <option key={`${id}-unselected`} value=\"\">\n          {unselectedText || '- Select -'}\n        </option>\n        {options.map((option) => (\n          <option value={option.value} key={`${id}-${option.value}-option`}>\n            {option.text}\n          </option>\n        ))}\n      </select>\n      {options.map((option) => {\n        const expansion = option.expansion;\n        return (\n          <React.Fragment key={`${id}-${option.value}-expansion`}>\n            {expansion && selectedItem === option.value && (\n              <div className=\"oec-itemchooser-expansion\">\n                {option.expansion}\n              </div>\n            )}\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\n/**\n * Props for an other option text input wrapped component of type TWrapped,\n * including props for TWrapped\n */\ntype OtherOptionTextInputWrapperProps<TWrapped> = {\n  legend: string;\n  showLegend?: boolean;\n  optional?: boolean;\n  otherInputLabel: string;\n  otherInputOnChange: React.ChangeEventHandler;\n  otherOptionDisplay: string;\n  horizontal?: boolean;\n  labelForSelect: string | React.ReactNode;\n} & Omit<TWrapped, 'label' | 'legend'>;\n\n/**\n * Wraps a Select element in a FieldSet and provides a text input when the user\n * selects \"Other\"\n */\nexport const SelectWithOther: React.FC<OtherOptionTextInputWrapperProps<\n  SelectProps\n>> = ({\n  id,\n  labelForSelect,\n  name,\n  defaultValue = '',\n  otherInputLabel,\n  otherInputOnChange,\n  otherOptionDisplay,\n  onChange,\n  status,\n  options,\n  children,\n  ...props\n}) => {\n  const OTHER_VALUE = '__other';\n\n  const [showOther, setShowOther] = useState(defaultValue === OTHER_VALUE);\n\n  const optionsWithOther = [\n    ...options,\n    {\n      text: otherOptionDisplay,\n      value: OTHER_VALUE,\n    },\n  ];\n\n  const _onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const changedValue = (e.target as any).value;\n    if (changedValue === OTHER_VALUE) {\n      setShowOther(true);\n    } else {\n      setShowOther(false);\n    }\n    onChange(e);\n  };\n\n  const selectElement = (\n    <Select\n      id={id}\n      label={labelForSelect}\n      defaultValue={defaultValue}\n      status={status}\n      onChange={_onChange}\n      options={optionsWithOther}\n      {...props}\n    />\n  );\n\n  if (showOther) {\n    const useFormFieldSet = (props as unknown) as FormFieldSetProps<any>;\n    if (useFormFieldSet) {\n      const formFieldSetProps = (props as unknown) as FormFieldSetProps<any>;\n      return (\n        <FormFieldSet {...formFieldSetProps}>{selectElement}</FormFieldSet>\n      );\n    }\n\n    const fieldSetProps = (props as unknown) as FieldSetProps;\n    return <FieldSet {...fieldSetProps}>{selectElement}</FieldSet>;\n  }\n\n  return selectElement;\n};\n","/home/melanie/Code/component-library/src/components/RadioButtonGroup/RadioButtonGroup.tsx",["431","432","433","434"],"import React, { useState } from 'react';\nimport { FieldSetProps, FieldSet } from '../FieldSet/FieldSet';\nimport { FormField, FormFieldProps } from '../Form';\nimport { FormFieldSetProps, FormFieldSet } from '../Form/FormFieldSet';\nimport { RadioButton, RadioButtonProps } from '../RadioButton/RadioButton';\n\nexport type RadioOption = Omit<RadioButtonProps, 'name'> & {\n  expansion?: React.ReactNode;\n};\n\n// TODO: we probably actually want to let the user specify the return type\nexport type RadioOptionInForm<TData> = Omit<\n  FormFieldProps<TData, RadioOption, any>,\n  'inputComponent' | 'onChange'\n>;\n\ntype CommonRadioGroupProps = {\n  inputName: string;\n  defaultSelectedItemId?: string;\n};\n\n/**\n * Props for InternalRadioButtonGroup\n */\ntype InternalRadioButtonGroupProps = CommonRadioGroupProps & {\n  options: RadioOption[];\n  inForm?: boolean;\n};\n\ntype PropsForGroupInForm<TData> = CommonRadioGroupProps & {\n  options: RadioOptionInForm<TData>[];\n  inForm: true;\n};\n\n/**\n * Props for RadioButtonGroup, which includes props for InternalRadioButtonGroup,\n * props for the wrapping field set(FieldSet or FormFieldSet),\n * and conditionally a flag to indicate when FormFieldSet is used\n */\nexport type RadioButtonGroupProps<TData> =\n  | (InternalRadioButtonGroupProps & FieldSetProps)\n  | (PropsForGroupInForm<TData> & FormFieldSetProps<TData>);\n\n/**\n * Component for displaying a group of related RadioButtons.\n * Renders the radio button group in a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */\nexport const RadioButtonGroup = <TData extends {}>({\n  options,\n  defaultSelectedItemId,\n  inForm,\n  inputName,\n  ...props\n}: RadioButtonGroupProps<TData>) => {\n  const [selectedItemId, setSelectedItemId] = useState(defaultSelectedItemId);\n\n  if (inForm) {\n    const formFieldSetProps = (props as unknown) as FormFieldSetProps<TData>;\n    const _options = options as RadioOptionInForm<TData>[];\n    return (\n      <FormFieldSet {...formFieldSetProps}>\n        {_options.map(({ expansion, ...optionProps }) => {\n          const { id, parseOnChangeEvent } = optionProps;\n          return (\n            <span key={id}>\n              <FormField<TData, RadioButtonProps, any>\n                // Stuff we want the option props to override\n                preprocessForDisplay={(data) => data === optionProps.value}\n                {...optionProps}\n                // Stuff the option props should not override\n                name={inputName}\n                parseOnChangeEvent={(e, dataDriller) => {\n                  setSelectedItemId(id);\n                  return parseOnChangeEvent\n                    ? parseOnChangeEvent(e, dataDriller)\n                    : e.target.value;\n                }}\n                defaultValue={id === selectedItemId}\n                inputComponent={RadioButton}\n              />\n              {expansion && selectedItemId === id && (\n                <div className=\"oec-itemchooser-expansion\">{expansion}</div>\n              )}\n            </span>\n          );\n        })}\n      </FormFieldSet>\n    );\n  }\n\n  const fieldSetProps = (props as unknown) as FieldSetProps;\n  const _options = options as RadioOption[];\n  return (\n    <FieldSet {...fieldSetProps}>\n      {_options.map(({ expansion, ...optionProps }) => {\n        const { id, onChange } = optionProps;\n        return (\n          <span key={id}>\n            <RadioButton\n              {...optionProps}\n              name={inputName}\n              onChange={(e) => {\n                setSelectedItemId(e.target.value);\n                onChange(e);\n              }}\n              defaultValue={id === selectedItemId}\n            />\n            {expansion && selectedItemId === id && (\n              <div className=\"oec-itemchooser-expansion\">{expansion}</div>\n            )}\n          </span>\n        );\n      })}\n    </FieldSet>\n  );\n};\n","/home/melanie/Code/component-library/src/components/LoadingWrapper/LoadingWrapper.tsx",[],"/home/melanie/Code/component-library/src/components/ProcessList/ProcessList.tsx",["435"],"import React from 'react';\nimport { ProcessStep, ProcessStepProps } from './ProcessStep';\n\nexport type ProcessListProps = {\n  processStepProps: ProcessStepProps[];\n  additionalClassName?: string;\n};\n\nexport function ProcessList({\n  processStepProps,\n  additionalClassName,\n}: ProcessListProps) {\n  return (\n    <ol className={`process ${additionalClassName}`}>\n      {processStepProps.map((props, idx) => (\n        <ProcessStep {...props} key={`${idx}`} />\n      ))}\n    </ol>\n  );\n}\n","/home/melanie/Code/component-library/src/components/index.ts",[],"/home/melanie/Code/component-library/src/components/Header/Header.tsx",["436","437"],"import React, { useState, useEffect } from 'react';\nimport { matchPath, useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport { NavLink, NavLinkProps } from './NavLink';\nimport closeIcon from 'uswds/src/img/close.svg';\nimport { NavDropdownProps, NavDropdown } from './NavDropdown';\n\nexport type HeaderProps = {\n  primaryTitle: string;\n  secondaryTitle?: string;\n  navItems: (NavLinkProps | NavDropdownProps)[];\n  showPrimaryNavItems?: boolean;\n  loginPath?: string;\n  logoutPath?: string;\n  userFirstName?: string;\n};\n\nconst setActiveStateOfNavLink = function (\n  item: NavLinkProps | NavDropdownProps,\n  index: number,\n  path: string\n) {\n  let active: boolean;\n\n  if (index === 0 && path === '/') {\n    // By convention, the first section should be active when at the root path\n    active = true;\n  } else {\n    active = !!matchPath(path, { path: item.path });\n  }\n\n  return { ...item, active };\n};\n\nexport const Header: React.FC<HeaderProps> = ({\n  primaryTitle,\n  secondaryTitle,\n  navItems,\n  logoutPath = '/logout',\n  userFirstName,\n  showPrimaryNavItems = true,\n}) => {\n  const [mobileMenuIsVisible, setMobileMenuIsVisible] = useState(false);\n  const location = useLocation();\n\n  function hideMenu() {\n    setMobileMenuIsVisible(false);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', hideMenu);\n    return function cleanup() {\n      window.removeEventListener('resize', hideMenu);\n    };\n  }, []);\n\n  useEffect(() => {\n    hideMenu();\n  }, [location]);\n\n  const primaryNavItems = navItems\n    .filter((item) => item.type === 'primary')\n    .map((item, index) =>\n      setActiveStateOfNavLink(item, index, location.pathname)\n    );\n\n  const secondaryNavItems = navItems.filter(\n    (item) => item.type === 'secondary'\n  );\n\n  return (\n    <div\n      className={cx({\n        'usa-js-mobile-nav--active': mobileMenuIsVisible,\n      })}\n    >\n      <div\n        data-testid=\"overlay\"\n        className={cx('usa-overlay', { 'is-visible': mobileMenuIsVisible })}\n        onClick={hideMenu}\n      ></div>\n      <header\n        className={cx(\n          'usa-header',\n          'usa-header--extended',\n          'usa-header--oec-default'\n        )}\n        role=\"banner\"\n      >\n        <div className=\"usa-navbar\">\n          <div className=\"usa-logo\" id=\"extended-logo\">\n            <Link to=\"/\" aria-label={`${primaryTitle} home`}>\n              <div\n                className={cx(\n                  'usa-logo__text',\n                  'display-flex',\n                  'flex-align-center'\n                )}\n              >\n                <div>\n                  <div\n                    className={cx('primary-title', {\n                      'primary-title--only': !secondaryTitle,\n                    })}\n                  >\n                    {primaryTitle}\n                  </div>\n                  {secondaryTitle && (\n                    <div className=\"secondary-title\">{secondaryTitle}</div>\n                  )}\n                </div>\n              </div>\n            </Link>\n          </div>\n          <button\n            className=\"usa-menu-btn\"\n            onClick={() => setMobileMenuIsVisible(!mobileMenuIsVisible)}\n          >\n            Menu\n          </button>\n        </div>\n        <nav\n          aria-label=\"Primary navigation\"\n          className={cx('usa-nav', { 'is-visible': mobileMenuIsVisible })}\n        >\n          <div className=\"usa-nav__inner\">\n            <button className=\"usa-nav__close\" onClick={hideMenu}>\n              <img src={closeIcon} alt=\"close\" />\n            </button>\n            {showPrimaryNavItems && (\n              <ul className=\"usa-nav__primary usa-accordion\">\n                {primaryNavItems.map((item, index) =>\n                  item.children ? (\n                    <NavDropdown {...item} key={index} />\n                  ) : (\n                    <NavLink {...item} key={index} />\n                  )\n                )}\n              </ul>\n            )}\n            <div className=\"usa-nav__secondary usa-nav__secondary--extended\">\n              <ul className=\"usa-nav__secondary-links\">\n                {secondaryNavItems.map((item, index) =>\n                  item.children ? (\n                    <NavDropdown {...item} key={index} />\n                  ) : (\n                    <NavLink {...item} key={index} />\n                  )\n                )}\n                {userFirstName && (\n                  <NavLink type=\"secondary\" text=\"Log out\" path={logoutPath} />\n                )}\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </header>\n    </div>\n  );\n};\n\nexport default Header;\n","/home/melanie/Code/component-library/src/components/Modal/Modal.tsx",[],"/home/melanie/Code/component-library/src/components/EditableTable/EditableTable.tsx",["438"],"import React from 'react';\nimport MaterialTable, { Column } from 'material-table';\nimport { TABLE_ICONS, OEC_FONT_FAMILY } from './TableIcons';\n\nexport type EditableTableColumn<T extends object> = Column<T>;\n\ntype EditableTableProps<T extends object> = {\n  title: string;\n  data: T[];\n  columns: EditableTableColumn<T>[];\n  onRowUpdate?: any;\n  onRowDelete?: any;\n  selectable?: boolean;\n  EditRowComponent?: React.FunctionComponent;\n};\n\n// TODO: abstract into component that manages focus: https://www.w3.org/TR/wai-aria-practices-1.1/#grid\nexport const EditableTable = <T extends object>({\n  title,\n  data,\n  columns,\n  onRowUpdate,\n  onRowDelete,\n  selectable = false,\n}: EditableTableProps<T>) => {\n  return (\n    <div className=\"oec-editable-table\">\n      <MaterialTable\n        icons={TABLE_ICONS}\n        title={title}\n        data={data}\n        columns={columns}\n        editable={{\n          onRowUpdate,\n          onRowDelete,\n        }}\n        options={{\n          rowStyle: {\n            fontFamily: OEC_FONT_FAMILY,\n          },\n          headerStyle: {\n            fontFamily: OEC_FONT_FAMILY,\n            whiteSpace: 'nowrap',\n          },\n          showTitle: false,\n          paging: false,\n          search: false,\n          toolbar: false,\n          selection: selectable,\n        }}\n      />\n    </div>\n  );\n};\n","/home/melanie/Code/component-library/src/components/CheckboxGroup/CheckboxGroup.tsx",["439","440","441","442"],"import React, { useState } from 'react';\nimport { FieldSetProps, FieldSet } from '../FieldSet/FieldSet';\nimport { FormField, FormFieldProps } from '../Form';\nimport { FormFieldSetProps, FormFieldSet } from '../Form/FormFieldSet';\nimport { Checkbox, SingleCheckbox } from '../Checkbox/Checkbox';\n\nexport type CheckboxInGroup = SingleCheckbox & {\n  expansion?: React.ReactNode;\n};\n\nexport type CheckboxOptionInForm<TData> = Omit<\n  FormFieldProps<TData, CheckboxInGroup, any>,\n  'inputComponent' | 'onChange'\n>;\n\n/**\n * Props for InternalCheckboxGroup\n */\ntype InternalCheckboxGroupProps = {\n  options: CheckboxInGroup[];\n  inForm?: boolean;\n  defaultSelectedItemsIds?: string | string[];\n};\n\ntype PropsForGroupInForm<TData> = {\n  options: CheckboxOptionInForm<TData>[];\n  inForm: true;\n  defaultSelectedItemsIds?: string | string[];\n};\n\n/**\n * Props for CheckboxGroup, which includes props for InternalCheckboxGroup,\n * props for the wrapping field set(FieldSet or FormFieldSet),\n * and conditionally a flag to indicate when FormFieldSet is used\n */\nexport type CheckboxGroupProps<TData> =\n  | (InternalCheckboxGroupProps & FieldSetProps)\n  | (PropsForGroupInForm<TData> & FormFieldSetProps<TData>);\n\n/**\n * Component for displaying a group of related Checkboxs.\n * Renders the radio button group in a FieldSet by default, or FormFieldSet\n * if FormFieldSetProps is provided as type param\n */\nexport const CheckboxGroup = <TData extends {}>({\n  options,\n  defaultSelectedItemsIds,\n  inForm,\n  ...props\n}: CheckboxGroupProps<TData>) => {\n  const selectedItemsOnInput = Array.isArray(defaultSelectedItemsIds)\n    ? defaultSelectedItemsIds\n    : [defaultSelectedItemsIds];\n  const [selectedItems, setSelectedItems] = useState(selectedItemsOnInput);\n\n  const internalOnChange = (value: string) =>\n    setSelectedItems((items) => {\n      if (items.includes(value)) {\n        return items.filter((i) => i !== value);\n      }\n      return [...items, value];\n    });\n\n  if (inForm) {\n    const formFieldSetProps = (props as unknown) as FormFieldSetProps<TData>;\n    const _options = options as CheckboxOptionInForm<TData>[];\n    return (\n      <FormFieldSet {...formFieldSetProps}>\n        {_options.map(({ expansion, ...optionProps }) => {\n          const { id, parseOnChangeEvent } = optionProps;\n          const selected = selectedItems.includes(id);\n          return (\n            <span key={id}>\n              <FormField<TData, SingleCheckbox, any>\n                {...optionProps}\n                parseOnChangeEvent={(e, dataDriller) => {\n                  internalOnChange(id);\n                  return parseOnChangeEvent\n                    ? parseOnChangeEvent(e, dataDriller)\n                    : e.target.value;\n                }}\n                defaultValue={selected}\n                inputComponent={Checkbox}\n              />\n              {expansion && selected && (\n                <div className=\"oec-itemchooser-expansion\">{expansion}</div>\n              )}\n            </span>\n          );\n        })}\n      </FormFieldSet>\n    );\n  }\n\n  const fieldSetProps = (props as unknown) as FieldSetProps;\n  const _options = options as CheckboxInGroup[];\n  return (\n    <FieldSet {...fieldSetProps}>\n      {_options.map(({ expansion, ...optionProps }) => {\n        const { id, onChange } = optionProps;\n        const selected = selectedItems.includes(id);\n        return (\n          <span key={id}>\n            <Checkbox\n              {...optionProps}\n              onChange={(e) => {\n                internalOnChange(id);\n                onChange(e);\n              }}\n              defaultValue={selected}\n            />\n            {expansion && selected && (\n              <div className=\"oec-itemchooser-expansion\">{expansion}</div>\n            )}\n          </span>\n        );\n      })}\n    </FieldSet>\n  );\n};\n","/home/melanie/Code/component-library/src/components/Button/Button.tsx",[],"/home/melanie/Code/component-library/src/components/Card/ExpandCard.tsx",["443"],"import React, {\n  useContext,\n  isValidElement,\n  ReactEventHandler,\n  Children,\n} from 'react';\nimport { CardContext } from '..';\n\n/**\n * Component for declaratively expanding/collapsing card\n * @param props\n */\nexport const ExpandCard: React.FC = ({ children }) => {\n  const { toggleExpanded } = useContext(CardContext);\n\n  if (!isValidElement(children)) {\n    throw new Error('Invalid children to ExpandCard');\n  }\n\n  return (\n    <>\n      {Children.map(children, (child) => {\n        const { type: Type, props, key } = child;\n        return (\n          <Type\n            {...key}\n            {...props}\n            onClick={(e: ReactEventHandler) => {\n              toggleExpanded();\n              if (props.onClick) {\n                props.onClick(e);\n              }\n            }}\n          />\n        );\n      })}\n    </>\n  );\n};\n","/home/melanie/Code/component-library/src/components/Card/CardExpansion.tsx",[],"/home/melanie/Code/component-library/src/assets/images/index.tsx",[],"/home/melanie/Code/component-library/src/components/Table/ColumnHeader.tsx",["444"],"import React from 'react';\nimport cx from 'classnames';\nimport { SortOrder, TableSort } from './Table';\nimport { DownArrowCircle } from '../../assets/images';\n\nexport type ColumnHeaderProps = {\n  name: string | JSX.Element;\n  sortable: boolean;\n  sorted: boolean;\n  sortOrder?: SortOrder;\n  index: number;\n  setTableSort: (sort: TableSort) => any;\n  width?: string;\n  className?: string;\n};\n\nexport class ColumnHeader extends React.Component<ColumnHeaderProps> {\n  toggleSort = () => {\n    const { sortable, sorted, sortOrder, index, setTableSort } = this.props;\n    const newOrder: SortOrder =\n      sorted && sortOrder === 'ascending' ? 'descending' : 'ascending';\n\n    if (!sortable) {\n      return;\n    }\n\n    setTableSort({ sortColumn: index, sortOrder: newOrder });\n  };\n\n  handleSortChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { sorted, sortOrder, index, setTableSort } = this.props;\n    const newOrder = event.target.value as SortOrder;\n\n    if (sorted && newOrder === sortOrder) {\n      this.toggleSort();\n    } else {\n      setTableSort({ sortColumn: index, sortOrder: newOrder });\n    }\n  };\n\n  render() {\n    const { name, sortable, sorted, sortOrder, width, className } = this.props;\n    return (\n      <th\n        scope=\"col\"\n        className={cx(\n          'oec-table__column-header',\n          { 'oec-sortable': sortable },\n          { 'oec-sorted': sorted },\n          { 'oec-unsorted': !sorted },\n          className\n        )}\n        role=\"columnheader\"\n        aria-sort={sortOrder || 'none'}\n        style={{ width: width }}\n      >\n        {!sortable && <span className=\"oec-table__column-title\">{name}</span>}\n        {sortable && (\n          <button\n            className=\"oec-table__column-title usa-button--unstyled width-full\"\n            onClick={this.toggleSort}\n            aria-label={`Sort table by ${name} in ${\n              sorted && sortOrder === 'ascending' ? 'descending' : 'ascending'\n            } order`}\n          >\n            {name}\n            <div\n              className={cx(\n                'oec-table__sort-controls',\n                {\n                  'oec-table__sort-controls--ascending':\n                    sorted && sortOrder === 'ascending',\n                },\n                {\n                  'oec-table__sort-controls--descending':\n                    sorted && sortOrder === 'descending',\n                }\n              )}\n            >\n              <DownArrowCircle />\n            </div>\n          </button>\n        )}\n      </th>\n    );\n  }\n}\n","/home/melanie/Code/component-library/src/components/ButtonWithDropdown/ButtonWithDropdown.tsx",["445"],"import React from 'react';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { useHideOnLostFocus } from '../../hooks';\nimport { AngleArrowDown } from '../../assets/images';\n\nexport type ButtonWithDropdownProps = {\n  id: string;\n  // Buttons all the way down\n  options: Omit<ButtonProps, 'appearance'>[];\n} & Omit<ButtonProps, 'onClick' | 'href' | 'external'>;\n\nexport const ButtonWithDropdown: React.FC<ButtonWithDropdownProps> = ({\n  id,\n  options,\n  text,\n  ...props\n}) => {\n  const { ref, isComponentVisible, setIsComponentVisible } = useHideOnLostFocus<\n    HTMLDivElement\n  >();\n\n  const getOnClick = (optionOnClick?: (_event: any) => any) => {\n    return (_event: any) => {\n      setIsComponentVisible(false);\n      if (optionOnClick) optionOnClick(_event);\n    };\n  };\n\n  return (\n    <div\n      // Clicking outside this div will hide the ul\n      ref={ref}\n      id={id}\n      className=\"oec-drop-button\"\n    >\n      <Button\n        aria-haspopup=\"true\"\n        aria-expanded={isComponentVisible}\n        text={\n          <div className=\"button-content display-flex\">\n            {text}\n            <AngleArrowDown className=\"arrow\" />\n          </div>\n        }\n        onClick={() => setIsComponentVisible((v) => !v)}\n        {...props}\n      />\n      {isComponentVisible && (\n        <ul>\n          {options.map((o) => (\n            <li>\n              <Button\n                {...o}\n                appearance=\"unstyled\"\n                onClick={getOnClick(o.onClick)}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","/home/melanie/Code/component-library/src/components/Accordion/Accordion.tsx",["446","447"],"import React from 'react';\nimport cx from 'classnames';\nimport { AccordionItemProps, AccordionItem } from './AccordionItem';\nimport { HeadingLevel } from '..';\n\nexport type AccordionProps = {\n  items: AccordionItemProps[];\n  titleHeadingLevel?: HeadingLevel;\n  className?: string;\n};\n\nexport const Accordion: React.FC<AccordionProps> = ({\n  items,\n  titleHeadingLevel = 'h2',\n  className,\n}) => {\n  return (\n    <div className={cx('oec-accordion', className)} aria-multiselectable>\n      {items.map((item) => (\n        <AccordionItem\n          key={item.id}\n          {...item}\n          headingLevel={titleHeadingLevel}\n        />\n      ))}\n    </div>\n  );\n};\n","/home/melanie/Code/component-library/src/index.ts",[],"/home/melanie/Code/component-library/src/components/Form/index.ts",[],"/home/melanie/Code/component-library/src/components/StepList/Step.tsx",["448"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { InlineIcon, HeadingLevel } from '..';\nimport cx from 'classnames';\n\nexport type StepStatus =\n  | 'incomplete'\n  | 'complete'\n  | 'attentionNeeded'\n  | 'exempt';\n\n// The statuses 'active' and 'notStarted' can only be assigned by StepList itself\nexport type InternalStepStatus = 'notStarted' | 'active' | StepStatus;\n\nexport type StepProps<T> = {\n  key: string;\n  name: string;\n  status: (props: T) => StepStatus;\n  editPath?: string;\n  // Edit component is an alternative to edit path\n  EditComponent?: React.FC<T>;\n  Summary?: React.FC<T>;\n  Form: React.FC<T>;\n  headerLevel?: HeadingLevel;\n};\n\nexport type InternalStepProps<T> = Omit<StepProps<T>, 'status'> & {\n  status: InternalStepStatus;\n  props: T;\n  type?: 'normal' | 'embedded';\n};\n\nconst labelForStatus = (status: StepStatus) => {\n  switch (status) {\n    case 'incomplete':\n      return 'Missing information';\n    case 'complete':\n      return 'Complete';\n    case 'attentionNeeded':\n      return 'Attention needed';\n    case 'exempt':\n      return '';\n  }\n};\n\nexport function Step<T>({\n  name,\n  status,\n  editPath,\n  Summary,\n  Form,\n  props,\n  headerLevel = 'h2',\n  type = 'normal',\n  EditComponent,\n}: InternalStepProps<T>) {\n  const Heading = headerLevel;\n  return (\n    <li\n      className={cx('oec-step-list__step', `oec-step-list__step--${status}`, {\n        embedded: type === 'embedded',\n      })}\n    >\n      <div className=\"oec-step-list__step__content\">\n        <Heading className=\"oec-step-list__step__title\">{name}</Heading>\n\n        {Summary && status !== 'notStarted' && status !== 'active' && (\n          <div className=\"oec-step-list__step__summary\">\n            <Summary {...props} />\n          </div>\n        )}\n        {status === 'active' && (\n          <div className=\"oec-step-list__step__form\">\n            <Form {...props} />\n          </div>\n        )}\n      </div>\n      {status !== 'exempt' && (\n        <div className=\"oec-step-list__step__actions\">\n          {status !== 'notStarted' && status !== 'active' && (\n            <>\n              <div className=\"oec-step-list__step__status-text\">\n                <InlineIcon icon={status} provideScreenReaderFallback={false} />\n                {labelForStatus(status)}\n              </div>\n              {editPath && (\n                <Link to={editPath} className=\"usa-link\">\n                  Edit<span className=\"usa-sr-only\"> {name.toLowerCase()}</span>\n                </Link>\n              )}\n              {EditComponent && <EditComponent {...props} />}\n            </>\n          )}\n        </div>\n      )}\n    </li>\n  );\n}\n","/home/melanie/Code/component-library/src/components/TabNav/Tabs.tsx",["449","450","451","452"],"import React, {\n  Dispatch,\n  SetStateAction,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport cx from 'classnames';\nimport pluralize from 'pluralize';\nimport { TabItem, TabNav } from './TabNav';\nimport { useHideOnLostFocus } from '../..';\nimport {\n  formatTabText,\n  getUniqueElementBottomVals,\n  resetTabItems,\n} from './tabNavUtils';\nimport { Tab } from './Tab';\n\ntype TabsProps = {\n  items: TabItem[];\n  activeTab: TabItem;\n  setActiveTab:\n    | Dispatch<SetStateAction<TabItem>>\n    | Dispatch<SetStateAction<TabItem | undefined>>;\n  itemType?: string;\n  onClick?: TabNav['onClick'];\n  secondary?: boolean;\n};\n\nexport type InternalTabItemType = TabItem & {\n  inDropdown: boolean;\n};\n\nexport const Tabs: React.FC<TabsProps> = ({\n  items: inputItems,\n  onClick: _onClick,\n  activeTab,\n  setActiveTab,\n  secondary,\n  itemType = 'tabs',\n}) => {\n  const activeTabId = activeTab?.id;\n\n  // All tab items, regardless of whether they're in dropdown\n  const [items, setItems] = useState<InternalTabItemType[]>(\n    resetTabItems(inputItems)\n  );\n\n  // Refs for tabs not in dropdown\n  const tabRefs = useRef<{ [key: string]: HTMLButtonElement | null }>({});\n\n  // Ref for dropdown\n  const {\n    ref: dropdownRef,\n    isComponentVisible: isDropdownVisible,\n    setIsComponentVisible: setIsDropdownVisible,\n  } = useHideOnLostFocus<HTMLDivElement>();\n\n  // If container resizes or order is changed, need to reset dropdown items\n  const [resetDropdownItems, setResetDropdownItems] = useState(false);\n  useEffect(() => {\n    // Need to reset dropdown items if conatiner resized\n    const onResize = () => setResetDropdownItems(true);\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  // On any tab click\n  const onClick = (tab: InternalTabItemType) => {\n    if (tab.inDropdown) {\n      setItems((_items) => {\n        // Get the items before and after this item\n        const itemsThatStayInFront = _items.filter(\n          (i) => i.firstItem && i.id !== tab.id\n        );\n        const notFirstItems = _items.filter(\n          (i) => !i.firstItem && i.id !== tab.id\n        );\n        return [...itemsThatStayInFront, tab, ...notFirstItems];\n      });\n      // Then reset dropdown items\n      setResetDropdownItems(true);\n    }\n    setActiveTab(tab);\n    _onClick && _onClick(tab.id, tab);\n  };\n\n  const [determineDropdownItems, setDetermineDropdownItems] = useState(true);\n  useEffect(() => {\n    // After we reset the dropdown items, then we need to redetermine what they are\n    if (resetDropdownItems) {\n      tabRefs.current = {};\n      setItems((oldItems) => resetTabItems(oldItems));\n      setResetDropdownItems(false);\n      setDetermineDropdownItems(true);\n    }\n  }, [resetDropdownItems]);\n\n  // Also need to redetermine dropdown items if input items change\n  useEffect(() => {\n    setItems(resetTabItems(inputItems));\n    setDetermineDropdownItems(true);\n  }, [inputItems]);\n\n  // When container width changes, change which tabs show\n  useLayoutEffect(() => {\n    const { bottom: dropdownBottom } =\n      dropdownRef.current?.getBoundingClientRect() || {};\n\n    if (!determineDropdownItems || !dropdownBottom) return;\n\n    const uniqueTabBottomVals = getUniqueElementBottomVals(tabRefs);\n    const baselineBottom = uniqueTabBottomVals[0];\n\n    const newItems = items.map((item) => {\n      const ref = tabRefs.current[item.id];\n      if (!ref) {\n        return item;\n      }\n      // Tab goes in dropdown if on initial render it was\n      // pushed to the next line\n      const { bottom: refBottom } = ref.getBoundingClientRect();\n      const inDropdown = refBottom > baselineBottom;\n      return { ...item, inDropdown };\n    });\n\n    if (uniqueTabBottomVals.length > 1) {\n      // If we're using the dropdown, then we need to account for its width\n      let combinedWidthReduced = 0;\n      const {\n        width: dropdownWidth,\n      } = dropdownRef.current?.getBoundingClientRect() || { width: 0 };\n\n      newItems\n        .filter((i) => !i.inDropdown)\n        .reverse()\n        .some((item) => {\n          const ref = tabRefs.current[item.id];\n          const thisItem = newItems.find((_item) => _item.id === item.id);\n          if (!ref || !thisItem) {\n            return false;\n          }\n\n          thisItem.inDropdown = true;\n          const { width: refWidth } = ref?.getBoundingClientRect() || {};\n          combinedWidthReduced += refWidth;\n          if (combinedWidthReduced >= dropdownWidth) {\n            return true;\n          }\n          return false;\n        });\n    }\n\n    setItems(newItems);\n    setDetermineDropdownItems(false);\n  }, [items, dropdownRef, determineDropdownItems]);\n\n  const dropdownItems = items.filter((i) => i.inDropdown);\n\n  return (\n    <div\n      role=\"tablist\"\n      aria-orientation=\"horizontal\"\n      className=\"grid-row oec-tab-nav--tab-container\"\n    >\n      {items\n        .filter((i) => !i.inDropdown)\n        .map((tabItem, index) => (\n          <Tab\n            key={`${tabItem.id}-${index}`}\n            tabItem={tabItem}\n            tabRefs={tabRefs}\n            isActiveTab={activeTabId === tabItem.id}\n            onClick={onClick}\n            secondary={secondary}\n          />\n        ))}\n      <div\n        ref={dropdownRef}\n        className={cx('oec-tab-nav--dropdown', {\n          'opacity-0': !dropdownItems.length,\n        })}\n      >\n        <button\n          className={cx('oec-tab-nav--tab', {\n            'oec-tab-nav--tab__secondary': secondary,\n          })}\n          // We need to disable this button and sketchily hide it instead of just display: none because it has to exist before the dropdownItems are determined for layout purposes\n          disabled={!dropdownItems.length}\n          aria-hidden={!dropdownItems.length}\n          aria-haspopup={!!dropdownItems.length}\n          aria-expanded={!!dropdownItems.length && isDropdownVisible}\n          onClick={() => setIsDropdownVisible((v) => !v)}\n        >{`+${pluralize(itemType, dropdownItems.length, true)}`}</button>\n        {isDropdownVisible && (\n          <ul className=\"position-absolute\">\n            {dropdownItems.map((tabItem, index) => (\n              <li key={`${index}-${tabItem.id}`}>\n                <button\n                  id={tabItem.id}\n                  role=\"tab\"\n                  type=\"button\"\n                  aria-selected={tabItem.id === activeTabId}\n                  onClick={() => {\n                    onClick(tabItem);\n                    setIsDropdownVisible(false);\n                  }}\n                  className=\"oec-tab-nav--tab\"\n                  title={tabItem.tabText}\n                >\n                  <span>{formatTabText(tabItem)}</span>\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n","/home/melanie/Code/component-library/src/components/FieldSet/FieldSet.tsx",["453"],"import React from 'react';\nimport { FormStatus, FormStatusProps } from '..';\nimport cx from 'classnames';\n\nexport type FieldSetProps = {\n  legend: string;\n  id: string;\n  showLegend?: boolean;\n  legendStyle?: 'normal' | 'title';\n  status?: FormStatusProps;\n  optional?: boolean;\n  className?: string;\n  hint?: string;\n  childrenGroupClassName?: string;\n  disabled?: boolean;\n};\n\n/**\n * Accessibility-following wrapping component for a native fieldset element\n */\nexport const FieldSet: React.FC<FieldSetProps> = ({\n  legend,\n  id,\n  showLegend = true,\n  legendStyle = 'normal',\n  status,\n  optional,\n  className,\n  children,\n  hint,\n  childrenGroupClassName,\n  disabled,\n}) => {\n  const legendId = `fieldset-legend-${id}`;\n  const hintId = `${id}-hint`;\n  let ariaLabeler = legendId;\n  if (hint) {\n    ariaLabeler = `${ariaLabeler} ${hintId}`;\n  }\n  if (status) {\n    ariaLabeler = `${ariaLabeler} ${status.id}`;\n  }\n\n  return (\n    <fieldset\n      className={cx(\n        'usa-fieldset',\n        {\n          [`usa-fieldset--${status && status.type}`]: status,\n        },\n        className\n      )}\n      id={id}\n      aria-labelledby={ariaLabeler}\n      aria-invalid={status && status.type === 'error'}\n      disabled={disabled}\n    >\n      <legend id={legendId}>\n        {/* Needs to be wrapped in another el because spacing works differently for legends */}\n        <span\n          className={cx({\n            'usa-label': showLegend,\n            'usa-sr-only': !showLegend,\n            'text-bold font-sans-lg': showLegend && legendStyle === 'title',\n          })}\n        >\n          {legend}\n          {optional && <span className=\"usa-hint\">&nbsp;(optional)</span>}\n        </span>\n      </legend>\n      {hint && (\n        <span className=\"usa-hint text-italic\" id={hintId}>\n          {hint}\n        </span>\n      )}\n      {status && <FormStatus {...status} />}\n      <div className={childrenGroupClassName}>{children}</div>\n    </fieldset>\n  );\n};\n","/home/melanie/Code/component-library/src/components/Form/FormFieldSet.tsx",["454","455","456"],"import React, { PropsWithChildren } from 'react';\nimport { FormContext, useGenericContext } from './FormContext';\nimport { FieldSetProps, FieldSet } from '../FieldSet/FieldSet';\nimport { FieldSetStatusFunc } from './FormStatusFunc';\n\nexport type FormFieldSetProps<TData> = {\n  status?: FieldSetStatusFunc<TData>;\n} & Pick<FieldSetProps, Exclude<keyof FieldSetProps, 'status'>>;\n\n/**\n * Generic fieldset component for use within a Form.\n * FormFieldSet has an optional status function, which\n * determines fieldset status based on the form data,\n * to which this FormFieldSet has access via the FormContext.\n */\nexport const FormFieldSet = <TData extends object>({\n  status = () => undefined,\n  children,\n  ...props\n}: PropsWithChildren<FormFieldSetProps<TData>>) => {\n  const { data, dataDriller, hideStatus } = useGenericContext<TData>(\n    FormContext\n  );\n\n  return (\n    <FieldSet\n      status={hideStatus ? undefined : status(data, dataDriller)}\n      {...props}\n    >\n      {children}\n    </FieldSet>\n  );\n};\n","/home/melanie/Code/component-library/src/components/ProcessList/ProcessStep.tsx",[],"/home/melanie/Code/component-library/src/components/Form/FormStatus/FormStatus.tsx",[],"/home/melanie/Code/component-library/src/components/RadioButton/RadioButton.tsx",["457"],"import React, { HTMLAttributes } from 'react';\nimport cx from 'classnames';\n\nexport type RadioButtonProps = {\n  id: string | number;\n  text: string;\n  value: string;\n  name: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => any;\n  defaultValue?: boolean;\n  disabled?: boolean;\n  className?: string;\n} & Omit<HTMLAttributes<HTMLInputElement>, 'onChange' | 'defaultValue'>;\n\n/**\n * Component that wraps a native radio input element\n */\nexport function RadioButton({\n  id,\n  text,\n  value,\n  name,\n  onChange,\n  defaultValue,\n  disabled = false,\n  className,\n  ...props\n}: RadioButtonProps) {\n  return (\n    <div className={cx('usa-radio', className)}>\n      <input\n        id={id}\n        type=\"radio\"\n        className=\"usa-radio__input\"\n        name={name}\n        value={value}\n        checked={defaultValue}\n        disabled={disabled}\n        onChange={onChange}\n        {...props}\n      />\n      <label className=\"usa-radio__label\" htmlFor={id}>\n        {text}\n      </label>\n    </div>\n  );\n}\n","/home/melanie/Code/component-library/src/components/Table/Row/index.ts",[],"/home/melanie/Code/component-library/src/components/Tag/Tag.tsx",[],"/home/melanie/Code/component-library/src/components/TooltipWrapper/TooltipWrapper.tsx",[],"/home/melanie/Code/component-library/src/components/SideNav/SideNav.tsx",["458"],"import React, { useState, useEffect } from 'react';\nimport cx from 'classnames';\nimport { SideNavItem, SideNavItemProps } from './SideNavItem';\n\nexport type SideNavProps = {\n  items: SideNavItemProps[];\n  activeItemId?: string;\n};\n\nexport const SideNav: React.FC<SideNavProps> = ({\n  items,\n  activeItemId,\n  children,\n}) => {\n  const [activeId, setActiveId] = useState(activeItemId);\n\n  useEffect(() => {\n    setActiveId(activeItemId);\n  }, [activeItemId]);\n\n  return (\n    <div className=\"oec-sidenav grid-row\">\n      <div className=\"mobile-lg:grid-col-4\">\n        <nav>\n          <ul>\n            {items.map((item) => {\n              const _onClick = () => {\n                setActiveId(item.id);\n                item.onClick && item.onClick();\n              };\n              return (\n                <SideNavItem\n                  {...item}\n                  key={item.id}\n                  onClick={_onClick}\n                  active={item.id === activeId}\n                />\n              );\n            })}\n          </ul>\n        </nav>\n      </div>\n      <div\n        className={cx(\n          'oec-sidenav__content',\n          { 'mobile-lg:grid-col-8': items.length > 0 },\n          { 'mobile-lg:grid-col-12': items.length === 0 }\n        )}\n      >\n        {children ||\n          (activeId && items.find((i) => i.id === activeId)?.content)}\n      </div>\n    </div>\n  );\n};\n","/home/melanie/Code/component-library/src/components/Legend/Legend.tsx",[],"/home/melanie/Code/component-library/src/components/HeadingLevel.tsx",[],"/home/melanie/Code/component-library/src/components/InlineIcon/InlineIcon.tsx",[],"/home/melanie/Code/component-library/src/components/Header/NavDropdown.tsx",["459"],"import React from 'react';\nimport cx from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { useHideOnLostFocus } from '../../hooks';\nimport { NavLinkType } from './NavLink';\n\nexport type NavDropdownLinkProps = {\n  text: string;\n  path: string;\n  target?: string;\n  rel?: string;\n  renderer?: never;\n};\n\nexport type NavDropdownRendererProps = {\n  text: string;\n  renderer: (_: any) => JSX.Element;\n};\n\nexport type NavDropdownProps = {\n  id: string;\n  text: string;\n  children: (NavDropdownRendererProps | NavDropdownLinkProps)[];\n  type: NavLinkType;\n  active?: boolean;\n  path?: never;\n};\n\nconst defaultRenderer = (props: NavDropdownLinkProps) => (\n  <Link to={props.path} {...props}>\n    {props.text}\n  </Link>\n);\n\nexport function NavDropdown({\n  id,\n  text,\n  children = [],\n  type = 'primary',\n  active = false,\n}: NavDropdownProps) {\n  const {\n    ref,\n    isComponentVisible,\n    setIsComponentVisible,\n  } = useHideOnLostFocus();\n\n  return (\n    <li className={`usa-nav__${type}-item`} key={id}>\n      <span id={text} className=\"display-inline-block with-dropdown\" ref={ref}>\n        <button\n          aria-expanded={isComponentVisible}\n          aria-controls={id}\n          aria-haspopup=\"true\"\n          className={'usa-nav__link' + (active ? ' usa-current' : '')}\n          onClick={() => setIsComponentVisible((s) => !s)}\n        >\n          {text}\n        </button>\n        <div\n          className={cx({ 'display-none': !isComponentVisible }, 'dropdown')}\n        >\n          <ul id={id} hidden={!isComponentVisible}>\n            {children.map((c, index) => (\n              <li\n                key={index}\n                className=\"option\"\n                onClick={() => setIsComponentVisible(false)}\n              >\n                {c.renderer ? c.renderer(c) : defaultRenderer(c)}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </span>\n    </li>\n  );\n}\n","/home/melanie/Code/component-library/src/components/EditableTable/TableIcons.tsx",[],"/home/melanie/Code/component-library/src/components/Checkbox/Checkbox.tsx",["460"],"import React, { InputHTMLAttributes } from 'react';\nimport cx from 'classnames';\n\nexport type SingleCheckbox = {\n  id: string;\n  text: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => any;\n  defaultValue?: boolean;\n  className?: string;\n  disabled?: boolean;\n  // Needs a value if it's not in a checkbox group\n  value?: string | undefined;\n  name?: string;\n} & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'defaultValue'>;\n\n/**\n * Component that wraps a native checkbox input element\n */\nexport function Checkbox({\n  id,\n  text,\n  onChange,\n  value,\n  defaultValue,\n  className,\n  disabled,\n  ...props\n}: SingleCheckbox) {\n  return (\n    <div className={cx('usa-checkbox', className)}>\n      <input\n        className=\"usa-checkbox__input\"\n        id={id}\n        value={value}\n        type=\"checkbox\"\n        defaultChecked={defaultValue}\n        onChange={onChange}\n        disabled={!!disabled}\n        {...props}\n      />\n      <label className=\"usa-checkbox__label\" htmlFor={id}>\n        {text}\n      </label>\n    </div>\n  );\n}\n","/home/melanie/Code/component-library/src/components/Header/NavLink.tsx",[],"/home/melanie/Code/component-library/src/components/Table/index.ts",[],"/home/melanie/Code/component-library/src/components/Form/ObjectDriller.ts",[],"/home/melanie/Code/component-library/src/components/Accordion/AccordionItem.tsx",["461"],"import React, { useState } from 'react';\nimport cx from 'classnames';\nimport { AngleArrowDown } from '../../assets/images';\nimport { HeadingLevel } from '../..';\n\nexport type AccordionItemProps = {\n  id: string;\n  title: JSX.Element | string;\n  headerContent?: JSX.Element;\n  expandText?: JSX.Element | string;\n  collapseText?: JSX.Element | string;\n  content: JSX.Element | string;\n  isExpanded?: boolean;\n};\n\ntype InternalAccordionItemProps = AccordionItemProps & {\n  headingLevel: HeadingLevel;\n};\n\nexport const AccordionItem: React.FC<InternalAccordionItemProps> = ({\n  id,\n  title,\n  headerContent,\n  expandText,\n  collapseText,\n  content,\n  isExpanded: initialIsExpanded = false,\n  headingLevel,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(initialIsExpanded);\n  const Heading = headingLevel;\n  return (\n    <>\n      <div className=\"oec-accordion__heading\">\n        <button\n          className=\"oec-accordion__button\"\n          onClick={() => setIsExpanded((e) => !e)}\n          aria-expanded={isExpanded}\n          aria-controls={id}\n        >\n          <div className=\"display-flex flex-justify flex-col flex-align-center padding-top-3 padding-bottom-3\">\n            <div>\n              <Heading className=\"oec-accordion__heading-title\">\n                {title}\n              </Heading>\n              {headerContent}\n            </div>\n\n            <div className=\"oec-accordion__heading-expand\">\n              {isExpanded && (collapseText ? collapseText : expandText)}\n              {!isExpanded && expandText}\n              <AngleArrowDown\n                className={cx('oec-accordion__button-icon', {\n                  'oec-accordion__button-icon--expanded': isExpanded,\n                })}\n              />\n            </div>\n          </div>\n        </button>\n      </div>\n      <div className=\"oec-accordion__content\" id={id} aria-hidden={!isExpanded}>\n        {content}\n      </div>\n    </>\n  );\n};\n","/home/melanie/Code/component-library/src/components/TabNav/tabNavUtils.ts",["462","463"],"import { TabItem } from '..';\nimport { InternalTabItemType } from './Tabs';\n\nexport function formatTabText(tabItem: TabItem) {\n  let text: string | JSX.Element = tabItem.tabText;\n  if (tabItem.tabTextFormatter) {\n    text = tabItem.tabTextFormatter(text);\n  }\n  return text;\n}\n\nexport function resetTabItems(\n  tabItems: (InternalTabItemType | TabItem)[]\n): InternalTabItemType[] {\n  return tabItems.map(\n    (item: TabItem | InternalTabItemType) =>\n      ({ ...item, inDropdown: false } as InternalTabItemType)\n  );\n}\n\nexport function getUniqueElementBottomVals(\n  tabRefs: React.MutableRefObject<{\n    [key: string]: HTMLButtonElement | null;\n  }>\n): number[] {\n  return Object.values(tabRefs.current)\n    .reduce((valuesAccumulator: number[], thisRef) => {\n      if (!thisRef) return valuesAccumulator;\n      const { bottom } = thisRef.getBoundingClientRect();\n      if (!valuesAccumulator.includes(bottom)) {\n        valuesAccumulator.push(bottom);\n      }\n      return valuesAccumulator;\n    }, [])\n    .sort((a, b) => a - b);\n}\n","/home/melanie/Code/component-library/src/components/Form/FormContext.ts",["464","465"],"import { createContext, Context, useContext } from 'react';\nimport { TObjectDriller } from './ObjectDriller';\n\n/**\n * FormContext provides form data, data accessor, and data update function to any\n * components that are children of a Form\n *\n * @property data The data being tracked (displayed and updated) by the form.\n * This data should only get immutable updates, via the provided updateData function.\n *\n * @property dataDriller ObjectDriller wrapper on form data, provided for convenience\n * to save all custom form fields from needing to create one.\n *\n * @property updateData Immutable update function for form data\n */\nexport type FormContextType = {\n  data: any;\n  dataDriller: any;\n  updateData: React.Dispatch<React.SetStateAction<any>>;\n  hideStatus?: boolean;\n};\n\n/**\n * The generic form context type, to support parameterized types for the context\n */\nexport type GenericFormContextType<T> = {\n  data: T;\n  dataDriller: TObjectDriller<NonNullable<T>>;\n  // Allows for function style update (setState(s => s) as opposed to setState(s))\n  // Needed for components that make multiple edits to the same object\n  // Otherwise just passing the object would result in one of the updates being\n  // overwritten.\n  updateData: React.Dispatch<React.SetStateAction<T>>;\n  hideStatus?: boolean;\n};\n/**\n * Utility for casting the un-typed context to the generic with type parameter,\n * so that form consumers can have type-constrained data, dataDriller, and updateData\n * @param context\n */\nexport function useGenericContext<S>(context: Context<any>) {\n  const processedContext = useContext(context);\n  return processedContext as GenericFormContextType<S>;\n}\n\nexport const FormContext = createContext<FormContextType>({\n  data: undefined,\n  dataDriller: undefined,\n  updateData: (_) => {},\n});\n\nexport const { Provider: FormProvider, Consumer: FormConsumer } = FormContext;\n","/home/melanie/Code/component-library/src/components/Form/FormSubmitButton.tsx",["466"],"import React from 'react';\nimport { Button } from '..';\nimport { ButtonProps } from '../Button/Button';\n\nexport type FormSumbitButtonProps = {\n  text?: string;\n} & Pick<ButtonProps, Exclude<keyof ButtonProps, 'text'>>;\n\n/**\n * Component for adding a form submit button,\n * to be used with generic Form\n * @param props\n */\nexport const FormSubmitButton: React.FC<FormSumbitButtonProps> = ({\n  text = 'Submit',\n  ...props\n}) => {\n  return <Button {...props} text={text} onClick=\"submit\" />;\n};\n","/home/melanie/Code/component-library/src/components/Form/FormField.tsx",["467","468"],"import React, { PropsWithChildren } from 'react';\nimport { FormContext, useGenericContext } from './FormContext';\nimport produce from 'immer';\nimport set from 'lodash/set';\nimport { TObjectDriller } from './ObjectDriller';\nimport { FieldStatusFunc } from './FormStatusFunc';\n\nexport type FormFieldProps<TData, TComponentProps, TFieldData> =\n  // React.FC<P> assigns the generic P to {} as a default type. That causes a\n  // subtype contrainst error. See https://stackoverflow.com/a/59363875. As a\n  // work around, we can conditionally check that TComponentProps extends {}.\n  TComponentProps extends {}\n    ? {\n        defaultValue?: TFieldData;\n        getValue: (\n          _: TObjectDriller<NonNullable<TData>>\n        ) => TObjectDriller<TFieldData>;\n        preprocessForDisplay?: (\n          _: TFieldData | undefined\n        ) => TFieldData | JSX.Element | string | undefined;\n        parseOnChangeEvent?: (\n          event: React.ChangeEvent<any>,\n          data: TObjectDriller<TData>\n        ) => TFieldData;\n        status?: FieldStatusFunc<TData, TComponentProps>;\n        inputComponent: React.FC<TComponentProps>;\n      } & /* Include TComponentProps props, except onChange, defaultValue, and status */ Pick<\n        TComponentProps,\n        Exclude<keyof TComponentProps, 'onChange' | 'defaultValue' | 'status'>\n      > /*\n\t\t\tIf TComponentProps does not extend {}, React will choke on creating\n\t\t\tthe component. So don't allow this case.\n\t\t*/\n    : never;\n\n/**\n * Generic form input field component that handles simple use cases,\n * where the data displayed in the field and updated by the user maps\n * directly to the necessary updates to form data state.\n *\n * For complex use cases (e.g. adding or removing array element),\n * custom form field components should be created\n */\n// TData must extend object for lodash set.\n// TComponentProps must extend {} for React.\nexport const FormField = <\n  TData extends object,\n  TComponentProps extends {},\n  TFieldData\n>({\n  defaultValue,\n  getValue,\n  preprocessForDisplay,\n  parseOnChangeEvent = (e) => e.target.value,\n  status = () => undefined,\n  inputComponent: InputComponent,\n  children,\n  ...props\n}: PropsWithChildren<FormFieldProps<TData, TComponentProps, TFieldData>>) => {\n  const { data, dataDriller, updateData, hideStatus } = useGenericContext<\n    TData\n  >(FormContext);\n\n  const accessor = getValue(dataDriller);\n  const value = accessor.value || defaultValue;\n  const updatePath = accessor.path;\n\n  const onChange = (e: React.ChangeEvent<any>) => {\n    const processedData = parseOnChangeEvent(e, dataDriller);\n    updateData(\n      produce<TData>(data, (draft) => set(draft, updatePath, processedData))\n    );\n  };\n\n  return (\n    <InputComponent\n      defaultValue={preprocessForDisplay ? preprocessForDisplay(value) : value}\n      onChange={onChange}\n      status={hideStatus ? undefined : status(dataDriller, updatePath, props)}\n      {...props}\n    >\n      {children}\n    </InputComponent>\n  );\n};\n","/home/melanie/Code/component-library/src/components/TabNav/Tab.tsx",["469"],"import React from 'react';\nimport cx from 'classnames';\nimport { TabItem } from './TabNav';\nimport { formatTabText } from './tabNavUtils';\n\nexport type TabProps = {\n  tabRefs: any;\n  tabItem: TabItem;\n  onClick: any;\n  isActiveTab?: boolean;\n  secondary?: boolean;\n};\n\nexport const Tab = ({\n  tabRefs,\n  tabItem,\n  isActiveTab,\n  secondary,\n  onClick,\n}: TabProps) => (\n  <button\n    id={tabItem.id}\n    ref={(node) => (tabRefs.current[tabItem.id] = node)}\n    role=\"tab\"\n    type=\"button\"\n    className={cx(\n      'oec-tab-nav--tab',\n      {\n        'oec-tab-nav--tab__active': isActiveTab,\n      },\n      {\n        'oec-tab-nav--tab__secondary': secondary,\n      }\n    )}\n    onClick={() => onClick(tabItem)}\n    aria-selected={isActiveTab}\n    title={tabItem.tabText}\n  >\n    <span>{formatTabText(tabItem)}</span>\n  </button>\n);\n","/home/melanie/Code/component-library/src/components/Table/Row/ExpandRow.tsx",["470"],"import React, {\n  useContext,\n  isValidElement,\n  ReactEventHandler,\n  Children,\n} from 'react';\nimport { RowContext } from './Row';\n\n/**\n * Expand control component, to be used within a Row and/or RowExpansion\n * to toggle expanded state\n */\nexport const ExpandRow: React.FC = ({ children }) => {\n  const { toggleExpanded } = useContext(RowContext);\n\n  if (!isValidElement(children)) {\n    throw new Error('Invalid children to ExpandRow');\n  }\n\n  return (\n    <>\n      {Children.map(children, (child) => {\n        const { type: Type, props, key } = child;\n        return (\n          <Type\n            {...key}\n            {...props}\n            onClick={(e: ReactEventHandler) => {\n              toggleExpanded();\n              if (props.onClick) {\n                props.onClick(e);\n              }\n            }}\n          />\n        );\n      })}\n    </>\n  );\n};\n","/home/melanie/Code/component-library/src/components/Table/Row/Row.tsx",[],"/home/melanie/Code/component-library/src/components/Form/Form.tsx",["471","472"],"import React, {\n  FormHTMLAttributes,\n  PropsWithChildren,\n  useState,\n  useEffect,\n} from 'react';\nimport cx from 'classnames';\nimport { FormProvider } from './FormContext';\nimport { ObjectDriller } from './ObjectDriller';\n\nexport type FormProps<T> = {\n  onSubmit: (_: T) => void;\n  data: T;\n  className?: string;\n  hideStatus?: boolean;\n} & /**\n * Creates a set of props that includes\n * all FormHTMLAttributes<HTMLFormElement> props, except onSubmit\n */ Pick<\n  FormHTMLAttributes<HTMLFormElement>,\n  Exclude<keyof FormHTMLAttributes<HTMLFormElement>, 'onSubmit'>\n>;\n\n/**\n * Generic form component for updating an object of type T.\n * The form tracks state of the object, and requires the use of a\n * 'submit' button (should be a FormSubmitButton)\n */\nexport const Form = <T extends any>({\n  className,\n  onSubmit,\n  data,\n  hideStatus,\n  children,\n  ...props\n}: PropsWithChildren<FormProps<T>>) => {\n  const [_data, updateData] = useState(data);\n\n  // If data prop changes, update the internal store as multiple forms can track the same data\n  useEffect(() => {\n    updateData(data);\n  }, [data]);\n\n  /**\n   * onSubmit function to supply to the form. The form event\n   * default is suppressed, and the Form component's onSubmit\n   * function is called with the form data as an argument.\n   * @param e FormEvent\n   */\n  const _onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    onSubmit(_data);\n  };\n\n  return (\n    <FormProvider\n      value={{\n        data: _data,\n        dataDriller: new ObjectDriller(_data),\n        updateData,\n        hideStatus,\n      }}\n    >\n      <form\n        className={cx('usa-form', className)}\n        onSubmit={_onSubmit}\n        {...props}\n      >\n        {children}\n      </form>\n    </FormProvider>\n  );\n};\n","/home/melanie/Code/component-library/src/hooks/index.ts",[],"/home/melanie/Code/component-library/src/components/SideNav/SideNavItem.tsx",["473"],"import React from 'react';\nimport cx from 'classnames';\nimport { InlineIcon, Icon, Button } from '..';\n\nexport type SideNavItemProps = {\n  id: string;\n  title: string | JSX.Element;\n  description: string;\n  icon?: Icon;\n  onClick?: () => any;\n  content?: JSX.Element;\n};\n\ntype InternalSideNavItemProps = SideNavItemProps & {\n  active: boolean;\n  onClick: () => any;\n};\n\nexport const SideNavItem = ({\n  id,\n  title,\n  description,\n  active,\n  onClick,\n  icon,\n}: InternalSideNavItemProps) => {\n  return (\n    <li id={id} className={cx('oec-sidenav__item', { active })}>\n      <Button\n        onClick={onClick}\n        appearance=\"unstyled\"\n        text={\n          <div>\n            <p className=\"oec-sidenav-item__title\">\n              {title} {icon && <InlineIcon icon={icon} />}\n            </p>\n            <p className=\"oec-sidenav-item__desc\">{description}</p>\n          </div>\n        }\n      ></Button>\n    </li>\n  );\n};\n",["474","475","476"],"/home/melanie/Code/component-library/src/components/Table/Row/RowExpansion.tsx",[],"/home/melanie/Code/component-library/src/hooks/useHideOnLostFocus.ts",[],"/home/melanie/Code/component-library/src/components/FileInput/FileInput.tsx",[],"/home/melanie/Code/component-library/src/components/DateInput/DateInput.tsx",["477"],"/home/melanie/Code/component-library/src/components/Card/Card.tsx",["478"],"import React, {\n  Children,\n  useEffect,\n  useState,\n  isValidElement,\n  PropsWithChildren,\n  createContext,\n  useCallback,\n} from 'react';\nimport cx from 'classnames';\nimport { Tag } from '..';\nimport { CardExpansion } from './CardExpansion';\n\nexport type CardContextType = {\n  isExpanded: boolean;\n  toggleExpanded: () => void;\n};\n\nconst CardContext = createContext<CardContextType>({\n  isExpanded: false,\n  toggleExpanded: () => {},\n});\n\nconst { Provider: CardProvider } = CardContext;\nexport { CardContext };\n\nexport type CardProps = {\n  appearance?: 'primary' | 'secondary';\n  borderless?: boolean;\n  className?: string;\n  expanded?: boolean;\n  onExpansionChange?: (_: boolean) => void;\n  forceClose?: boolean;\n  showTag?: boolean;\n};\n\nexport function Card({\n  appearance,\n  borderless = false,\n  className,\n  expanded = false,\n  onExpansionChange,\n  forceClose,\n  showTag = false,\n  children,\n}: PropsWithChildren<CardProps>) {\n  const [previousIsExpanded, setPreviousIsExpanded] = useState<boolean>();\n  const [isExpanded, setIsExpanded] = useState(expanded);\n  const updateExpanded = useCallback(\n    (_: boolean) => {\n      setPreviousIsExpanded(isExpanded);\n      setIsExpanded(_);\n    },\n    [setPreviousIsExpanded, setIsExpanded, isExpanded]\n  );\n  const toggleExpanded = () => updateExpanded(!isExpanded);\n\n  useEffect(() => {\n    if (onExpansionChange && previousIsExpanded !== undefined) {\n      onExpansionChange(isExpanded);\n    }\n  }, [isExpanded, previousIsExpanded, onExpansionChange]);\n\n  useEffect(() => {\n    if (forceClose) {\n      updateExpanded(false);\n    }\n  }, [forceClose, updateExpanded]);\n\n  return (\n    <CardProvider\n      value={{\n        isExpanded,\n        toggleExpanded,\n      }}\n    >\n      <div\n        className={cx(\n          'oec-card',\n          {\n            [`oec-card--${appearance}`]: appearance,\n            'oec-card--borderless': borderless,\n          },\n          className\n        )}\n      >\n        {showTag && (\n          <Tag\n            className=\"oec-card-tag\"\n            text=\"NEW\"\n            color=\"theme-color-primary\"\n          />\n        )}\n        <div className=\"oec-card-cell\">\n          {Children.map(children, (child) => {\n            if (!isValidElement(child)) {\n              throw new Error('Invalid card child element');\n            }\n            const type =\n              typeof child.type === 'string' ? child.type : child.type.name;\n            if (type !== CardExpansion.name) {\n              return child;\n            }\n          })}\n        </div>\n        <div\n          className={cx({\n            'oec-card-divider': isExpanded,\n          })}\n        ></div>\n        {isExpanded && (\n          <div className={cx('oec-card-cell', 'oec-card-expansion')}>\n            {Children.map(children, (child) => {\n              if (!isValidElement(child)) {\n                throw new Error('Invalid card child element');\n              }\n              const type =\n                typeof child.type === 'string' ? child.type : child.type.name;\n              if (type === CardExpansion.name) {\n                return child;\n              }\n            })}\n          </div>\n        )}\n      </div>\n    </CardProvider>\n  );\n}\n","/home/melanie/Code/component-library/src/components/Alert/Alert.tsx",[],"/home/melanie/Code/component-library/src/components/ErrorBoundary/ErrorBoundary.tsx",["479"],"import React from 'react';\nimport { Alert, AlertProps } from '..';\n\nexport type ErrorBoundaryState = {\n  hasError: boolean;\n};\n\nexport type ErrorBoundaryProps = {\n  alertProps?: AlertProps;\n};\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps> {\n  // https://reactjs.org/docs/error-boundaries.html\n  // Hooks don't handle componentDidCatch so this has to be a class for now\n  // https://reactjs.org/docs/hooks-faq.html#do-hooks-cover-all-use-cases-for-classes\n  public readonly state: ErrorBoundaryState = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error: any) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const alertProps = this.props.alertProps || {\n      text: 'Something went wrong',\n      type: 'error',\n      heading: 'Error',\n    };\n    if (hasError) {\n      // TODO: set alert context here instead? return nothing?\n      return <Alert {...alertProps} />;\n    }\n\n    return this.props.children;\n  }\n}\n",{"ruleId":"480","replacedBy":"481"},{"ruleId":"482","replacedBy":"483"},{"ruleId":"484","replacedBy":"485"},{"ruleId":"480","replacedBy":"481"},{"ruleId":"482","replacedBy":"483"},{"ruleId":"484","replacedBy":"486"},{"ruleId":"487","severity":1,"message":"488","line":5,"column":10,"nodeType":"489","messageId":"490","endLine":5,"endColumn":20},{"ruleId":"487","severity":1,"message":"491","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":25},{"ruleId":"487","severity":1,"message":"492","line":6,"column":10,"nodeType":"489","messageId":"490","endLine":6,"endColumn":25},{"ruleId":"487","severity":1,"message":"491","line":5,"column":21,"nodeType":"489","messageId":"490","endLine":5,"endColumn":36},{"ruleId":"487","severity":1,"message":"493","line":3,"column":25,"nodeType":"489","messageId":"490","endLine":3,"endColumn":44},{"ruleId":"487","severity":1,"message":"491","line":3,"column":20,"nodeType":"489","messageId":"490","endLine":3,"endColumn":35},{"ruleId":"487","severity":1,"message":"494","line":2,"column":18,"nodeType":"489","messageId":"490","endLine":2,"endColumn":24},{"ruleId":"487","severity":1,"message":"495","line":8,"column":21,"nodeType":"489","messageId":"490","endLine":8,"endColumn":35},{"ruleId":"487","severity":1,"message":"496","line":11,"column":3,"nodeType":"489","messageId":"490","endLine":11,"endColumn":16},{"ruleId":"487","severity":1,"message":"497","line":13,"column":3,"nodeType":"489","messageId":"490","endLine":13,"endColumn":17},{"ruleId":"487","severity":1,"message":"498","line":15,"column":3,"nodeType":"489","messageId":"490","endLine":15,"endColumn":20},{"ruleId":"487","severity":1,"message":"499","line":5,"column":10,"nodeType":"489","messageId":"490","endLine":5,"endColumn":22},{"ruleId":"487","severity":1,"message":"500","line":6,"column":10,"nodeType":"489","messageId":"490","endLine":6,"endColumn":26},{"ruleId":"487","severity":1,"message":"491","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":25},{"ruleId":"487","severity":1,"message":"501","line":6,"column":28,"nodeType":"489","messageId":"490","endLine":6,"endColumn":39},{"ruleId":"487","severity":1,"message":"491","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":25},{"ruleId":"487","severity":1,"message":"502","line":6,"column":10,"nodeType":"489","messageId":"490","endLine":6,"endColumn":26},{"ruleId":"487","severity":1,"message":"503","line":4,"column":20,"nodeType":"489","messageId":"490","endLine":4,"endColumn":33},{"ruleId":"487","severity":1,"message":"504","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":17},{"ruleId":"487","severity":1,"message":"491","line":4,"column":31,"nodeType":"489","messageId":"490","endLine":4,"endColumn":46},{"ruleId":"487","severity":1,"message":"505","line":2,"column":16,"nodeType":"489","messageId":"490","endLine":2,"endColumn":33},{"ruleId":"487","severity":1,"message":"506","line":2,"column":35,"nodeType":"489","messageId":"490","endLine":2,"endColumn":53},{"ruleId":"487","severity":1,"message":"507","line":2,"column":55,"nodeType":"489","messageId":"490","endLine":2,"endColumn":64},{"ruleId":"487","severity":1,"message":"508","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":22},{"ruleId":"487","severity":1,"message":"491","line":3,"column":22,"nodeType":"489","messageId":"490","endLine":3,"endColumn":37},{"ruleId":"487","severity":1,"message":"509","line":1,"column":27,"nodeType":"489","messageId":"490","endLine":1,"endColumn":41},{"ruleId":"487","severity":1,"message":"491","line":2,"column":22,"nodeType":"489","messageId":"490","endLine":2,"endColumn":37},{"ruleId":"487","severity":1,"message":"510","line":3,"column":20,"nodeType":"489","messageId":"490","endLine":3,"endColumn":33},{"ruleId":"487","severity":1,"message":"498","line":5,"column":10,"nodeType":"489","messageId":"490","endLine":5,"endColumn":27},{"ruleId":"487","severity":1,"message":"510","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":23},{"ruleId":"487","severity":1,"message":"511","line":3,"column":21,"nodeType":"489","messageId":"490","endLine":3,"endColumn":35},{"ruleId":"487","severity":1,"message":"498","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":27},{"ruleId":"487","severity":1,"message":"512","line":5,"column":23,"nodeType":"489","messageId":"490","endLine":5,"endColumn":39},{"ruleId":"487","severity":1,"message":"513","line":2,"column":23,"nodeType":"489","messageId":"490","endLine":2,"endColumn":39},{"ruleId":"487","severity":1,"message":"499","line":5,"column":19,"nodeType":"489","messageId":"490","endLine":5,"endColumn":31},{"ruleId":"487","severity":1,"message":"500","line":7,"column":10,"nodeType":"489","messageId":"490","endLine":7,"endColumn":26},{"ruleId":"487","severity":1,"message":"514","line":2,"column":25,"nodeType":"489","messageId":"490","endLine":2,"endColumn":31},{"ruleId":"487","severity":1,"message":"510","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":23},{"ruleId":"487","severity":1,"message":"511","line":3,"column":21,"nodeType":"489","messageId":"490","endLine":3,"endColumn":35},{"ruleId":"487","severity":1,"message":"498","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":27},{"ruleId":"487","severity":1,"message":"515","line":5,"column":20,"nodeType":"489","messageId":"490","endLine":5,"endColumn":34},{"ruleId":"487","severity":1,"message":"516","line":4,"column":3,"nodeType":"489","messageId":"490","endLine":4,"endColumn":20},{"ruleId":"487","severity":1,"message":"517","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":19},{"ruleId":"487","severity":1,"message":"518","line":2,"column":18,"nodeType":"489","messageId":"490","endLine":2,"endColumn":29},{"ruleId":"487","severity":1,"message":"519","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":28},{"ruleId":"487","severity":1,"message":"508","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":22},{"ruleId":"487","severity":1,"message":"508","line":3,"column":22,"nodeType":"489","messageId":"490","endLine":3,"endColumn":34},{"ruleId":"487","severity":1,"message":"520","line":2,"column":3,"nodeType":"489","messageId":"490","endLine":2,"endColumn":11},{"ruleId":"487","severity":1,"message":"521","line":3,"column":3,"nodeType":"489","messageId":"490","endLine":3,"endColumn":17},{"ruleId":"487","severity":1,"message":"504","line":11,"column":10,"nodeType":"489","messageId":"490","endLine":11,"endColumn":17},{"ruleId":"487","severity":1,"message":"522","line":11,"column":19,"nodeType":"489","messageId":"490","endLine":11,"endColumn":25},{"ruleId":"487","severity":1,"message":"491","line":2,"column":22,"nodeType":"489","messageId":"490","endLine":2,"endColumn":37},{"ruleId":"487","severity":1,"message":"523","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":34},{"ruleId":"487","severity":1,"message":"510","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":23},{"ruleId":"487","severity":1,"message":"524","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":28},{"ruleId":"487","severity":1,"message":"509","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":31},{"ruleId":"487","severity":1,"message":"502","line":3,"column":23,"nodeType":"489","messageId":"490","endLine":3,"endColumn":39},{"ruleId":"487","severity":1,"message":"525","line":5,"column":10,"nodeType":"489","messageId":"490","endLine":5,"endColumn":21},{"ruleId":"487","severity":1,"message":"526","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":36},{"ruleId":"487","severity":1,"message":"508","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":22},{"ruleId":"487","severity":1,"message":"504","line":1,"column":10,"nodeType":"489","messageId":"490","endLine":1,"endColumn":17},{"ruleId":"487","severity":1,"message":"527","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":29},{"ruleId":"487","severity":1,"message":"528","line":1,"column":25,"nodeType":"489","messageId":"490","endLine":1,"endColumn":32},{"ruleId":"487","severity":1,"message":"529","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":24},{"ruleId":"487","severity":1,"message":"518","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":21},{"ruleId":"487","severity":1,"message":"523","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":34},{"ruleId":"487","severity":1,"message":"530","line":6,"column":10,"nodeType":"489","messageId":"490","endLine":6,"endColumn":25},{"ruleId":"487","severity":1,"message":"504","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":17},{"ruleId":"487","severity":1,"message":"516","line":4,"column":3,"nodeType":"489","messageId":"490","endLine":4,"endColumn":20},{"ruleId":"487","severity":1,"message":"531","line":2,"column":3,"nodeType":"489","messageId":"490","endLine":2,"endColumn":21},{"ruleId":"487","severity":1,"message":"523","line":3,"column":3,"nodeType":"489","messageId":"490","endLine":3,"endColumn":20},{"ruleId":"487","severity":1,"message":"532","line":3,"column":22,"nodeType":"489","messageId":"490","endLine":3,"endColumn":26},{"ruleId":"480","replacedBy":"533"},{"ruleId":"482","replacedBy":"534"},{"ruleId":"484","replacedBy":"535"},{"ruleId":"487","severity":1,"message":"491","line":4,"column":31,"nodeType":"489","messageId":"490","endLine":4,"endColumn":46},{"ruleId":"487","severity":1,"message":"523","line":6,"column":3,"nodeType":"489","messageId":"490","endLine":6,"endColumn":20},{"ruleId":"487","severity":1,"message":"488","line":2,"column":17,"nodeType":"489","messageId":"490","endLine":2,"endColumn":27},"no-native-reassign",["536"],"no-negated-in-lhs",["537"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'AlertProps' is defined but never used.","Identifier","unusedVar","'FormStatusProps' is defined but never used.","'CheckboxInGroup' is defined but never used.","'EditableTableColumn' is defined but never used.","'Moment' is defined but never used.","'TextInputProps' is defined but never used.","'CheckboxProps' is defined but never used.","'DateInputProps' is defined but never used.","'FormFieldSetProps' is defined but never used.","'NavLinkProps' is defined but never used.","'NavDropdownProps' is defined but never used.","'RadioOption' is defined but never used.","'SideNavItemProps' is defined but never used.","'StepListProps' is defined but never used.","'TabItem' is defined but never used.","'InternalStepProps' is defined but never used.","'InternalStepStatus' is defined but never used.","'StepProps' is defined but never used.","'HeadingLevel' is defined but never used.","'HTMLAttributes' is defined but never used.","'FieldSetProps' is defined but never used.","'FormFieldProps' is defined but never used.","'RadioButtonProps' is defined but never used.","'ProcessStepProps' is defined but never used.","'Column' is defined but never used.","'SingleCheckbox' is defined but never used.","'ReactEventHandler' is defined but never used.","'SortOrder' is defined but never used.","'ButtonProps' is defined but never used.","'AccordionItemProps' is defined but never used.","'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'TabNav' is defined but never used.","'PropsWithChildren' is defined but never used.","'FieldSetStatusFunc' is defined but never used.","'NavLinkType' is defined but never used.","'InputHTMLAttributes' is defined but never used.","'InternalTabItemType' is defined but never used.","'Context' is defined but never used.","'TObjectDriller' is defined but never used.","'FieldStatusFunc' is defined but never used.","'FormHTMLAttributes' is defined but never used.","'Icon' is defined but never used.",["536"],["537"],[],"no-global-assign","no-unsafe-negation"]